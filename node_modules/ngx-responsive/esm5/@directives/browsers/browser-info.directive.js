import { __decorate, __extends } from "tslib";
/**
 * @name browser-info.directive
 * @description Browser info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Input, Output, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { BrowserInfo } from './browser-info';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var BrowserInfoDirective = /** @class */ (function (_super) {
    __extends(BrowserInfoDirective, _super);
    function BrowserInfoDirective(_responsiveState, cd, platformService) {
        var _this = _super.call(this, _responsiveState, platformService) || this;
        _this._responsiveState = _responsiveState;
        _this.cd = cd;
        _this.platformService = platformService;
        _this.browser = new EventEmitter();
        return _this;
    }
    Object.defineProperty(BrowserInfoDirective.prototype, "browserInfo", {
        set: function (grid_state) {
            this._updateData(this.currentstate);
        },
        enumerable: true,
        configurable: true
    });
    BrowserInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    BrowserInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    BrowserInfoDirective.prototype._updateData = function (value) {
        this.browser.emit(value);
        this.cd.markForCheck();
    };
    BrowserInfoDirective.ctorParameters = function () { return [
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Output()
    ], BrowserInfoDirective.prototype, "browser", void 0);
    __decorate([
        Input()
    ], BrowserInfoDirective.prototype, "browserInfo", null);
    BrowserInfoDirective = __decorate([
        Directive({
            selector: 'browser-info'
        })
    ], BrowserInfoDirective);
    return BrowserInfoDirective;
}(BrowserInfo));
export { BrowserInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvYnJvd3NlcnMvYnJvd3Nlci1pbmZvLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0E7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFN0csT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFLMUY7SUFBMEMsd0NBQVc7SUFLakQsOEJBQW1CLGdCQUFpQyxFQUN4QyxFQUFxQixFQUNuQixlQUFnQztRQUY5QyxZQUdJLGtCQUFNLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxTQUFHO1FBSDVCLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDeEMsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDbkIscUJBQWUsR0FBZixlQUFlLENBQWlCO1FBTjdCLGFBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFPbkIsQ0FBQztJQU50QyxzQkFBSSw2Q0FBVzthQUFmLFVBQWdCLFVBQTZCO1lBQ2xELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hDLENBQUM7OztPQUFBO0lBTUQsdUNBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ0QsMENBQVcsR0FBWDtRQUNJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBQ1MsMENBQVcsR0FBckIsVUFBc0IsS0FBVTtRQUM1QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7O2dCQWRvQyxlQUFlO2dCQUNwQyxpQkFBaUI7Z0JBQ0YsZUFBZTs7SUFOcEM7UUFBVCxNQUFNLEVBQUU7eURBQXdEO0lBQ3hEO1FBQVIsS0FBSyxFQUFFOzJEQUVQO0lBSlEsb0JBQW9CO1FBSGhDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxjQUFjO1NBQzNCLENBQUM7T0FDVyxvQkFBb0IsQ0FvQmhDO0lBQUQsMkJBQUM7Q0FBQSxBQXBCRCxDQUEwQyxXQUFXLEdBb0JwRDtTQXBCWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIEBuYW1lIGJyb3dzZXItaW5mby5kaXJlY3RpdmVcclxuICogQGRlc2NyaXB0aW9uIEJyb3dzZXIgaW5mbyBkaXJlY3RpdmUgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBSZXNwb25zaXZlU3RhdGUgfSBmcm9tICcuLi8uLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuaW1wb3J0IHsgQnJvd3NlckluZm8gfSBmcm9tICcuL2Jyb3dzZXItaW5mbyc7XHJcbmltcG9ydCB7IFBsYXRmb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9wbGF0Zm9ybS1zZXJ2aWNlL3BsYXRmb3JtLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ2Jyb3dzZXItaW5mbydcclxufSlcclxuZXhwb3J0IGNsYXNzIEJyb3dzZXJJbmZvRGlyZWN0aXZlIGV4dGVuZHMgQnJvd3NlckluZm8gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBAT3V0cHV0KCkgcHVibGljIGJyb3dzZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQElucHV0KCkgc2V0IGJyb3dzZXJJbmZvKGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YSh0aGlzLmN1cnJlbnRzdGF0ZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIHByb3RlY3RlZCBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgKSB7IHN1cGVyKF9yZXNwb25zaXZlU3RhdGUsIHBsYXRmb3JtU2VydmljZSk7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlzY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF91cGRhdGVEYXRhKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmJyb3dzZXIuZW1pdCh2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxufVxyXG4iXX0=