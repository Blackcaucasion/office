import { __decorate, __extends } from "tslib";
/**
 * @name browser-directives
 * @description Browser directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var IsChromeDirective = /** @class */ (function (_super) {
    __extends(IsChromeDirective, _super);
    function IsChromeDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'chrome';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsChromeDirective.prototype, "isChrome", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    IsChromeDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsChromeDirective.prototype, "isChrome", null);
    IsChromeDirective = __decorate([
        Directive({
            selector: '[isChrome]'
        })
    ], IsChromeDirective);
    return IsChromeDirective;
}(RESPONSIVE_BASE));
export { IsChromeDirective };
var IsFirefoxDirective = /** @class */ (function (_super) {
    __extends(IsFirefoxDirective, _super);
    function IsFirefoxDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'firefox';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsFirefoxDirective.prototype, "isFirefox", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    IsFirefoxDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsFirefoxDirective.prototype, "isFirefox", null);
    IsFirefoxDirective = __decorate([
        Directive({
            selector: '[isFirefox]'
        })
    ], IsFirefoxDirective);
    return IsFirefoxDirective;
}(RESPONSIVE_BASE));
export { IsFirefoxDirective };
var IsSafariDirective = /** @class */ (function (_super) {
    __extends(IsSafariDirective, _super);
    function IsSafariDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'safari';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsSafariDirective.prototype, "isSafari", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    IsSafariDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsSafariDirective.prototype, "isSafari", null);
    IsSafariDirective = __decorate([
        Directive({
            selector: '[isSafari]'
        })
    ], IsSafariDirective);
    return IsSafariDirective;
}(RESPONSIVE_BASE));
export { IsSafariDirective };
var IsOperaDirective = /** @class */ (function (_super) {
    __extends(IsOperaDirective, _super);
    function IsOperaDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'opera';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsOperaDirective.prototype, "isOpera", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    IsOperaDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsOperaDirective.prototype, "isOpera", null);
    IsOperaDirective = __decorate([
        Directive({
            selector: '[isOpera]'
        })
    ], IsOperaDirective);
    return IsOperaDirective;
}(RESPONSIVE_BASE));
export { IsOperaDirective };
var IsIEDirective = /** @class */ (function (_super) {
    __extends(IsIEDirective, _super);
    function IsIEDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'ie';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIEDirective.prototype, "isIE", {
        set: function (grid_state) {
            this.setGrid(this._state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    IsIEDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIEDirective.prototype, "isIE", null);
    IsIEDirective = __decorate([
        Directive({
            selector: '[isIE]'
        })
    ], IsIEDirective);
    return IsIEDirective;
}(RESPONSIVE_BASE));
export { IsIEDirective };
var ShowItBrowserDirective = /** @class */ (function (_super) {
    __extends(ShowItBrowserDirective, _super);
    function ShowItBrowserDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItBrowserDirective.prototype, "showItBrowser", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    ShowItBrowserDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], ShowItBrowserDirective.prototype, "showItBrowser", null);
    ShowItBrowserDirective = __decorate([
        Directive({
            selector: '[showItBrowser]'
        })
    ], ShowItBrowserDirective);
    return ShowItBrowserDirective;
}(RESPONSIVE_BASE));
export { ShowItBrowserDirective };
var HideItBrowserDirective = /** @class */ (function (_super) {
    __extends(HideItBrowserDirective, _super);
    function HideItBrowserDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItBrowserDirective.prototype, "hideItBrowser", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'browser');
        },
        enumerable: true,
        configurable: true
    });
    HideItBrowserDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], HideItBrowserDirective.prototype, "hideItBrowser", null);
    HideItBrowserDirective = __decorate([
        Directive({
            selector: '[hideItBrowser]'
        })
    ], HideItBrowserDirective);
    return HideItBrowserDirective;
}(RESPONSIVE_BASE));
export { HideItBrowserDirective };
var IsIE9Directive = /** @class */ (function (_super) {
    __extends(IsIE9Directive, _super);
    function IsIE9Directive(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'ie 9';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE9Directive.prototype, "isIE9", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    IsIE9Directive.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIE9Directive.prototype, "isIE9", null);
    IsIE9Directive = __decorate([
        Directive({
            selector: '[isIE9]'
        })
    ], IsIE9Directive);
    return IsIE9Directive;
}(RESPONSIVE_BASE));
export { IsIE9Directive };
var IsIE10Directive = /** @class */ (function (_super) {
    __extends(IsIE10Directive, _super);
    function IsIE10Directive(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'ie 10';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE10Directive.prototype, "isIE10", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    IsIE10Directive.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIE10Directive.prototype, "isIE10", null);
    IsIE10Directive = __decorate([
        Directive({
            selector: '[isIE10]'
        })
    ], IsIE10Directive);
    return IsIE10Directive;
}(RESPONSIVE_BASE));
export { IsIE10Directive };
var IsIE11Directive = /** @class */ (function (_super) {
    __extends(IsIE11Directive, _super);
    function IsIE11Directive(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'ie 11';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE11Directive.prototype, "isIE11", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    IsIE11Directive.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIE11Directive.prototype, "isIE11", null);
    IsIE11Directive = __decorate([
        Directive({
            selector: '[isIE11]'
        })
    ], IsIE11Directive);
    return IsIE11Directive;
}(RESPONSIVE_BASE));
export { IsIE11Directive };
var IsIE12Directive = /** @class */ (function (_super) {
    __extends(IsIE12Directive, _super);
    function IsIE12Directive(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'ie 12';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIE12Directive.prototype, "isIE12", {
        set: function (grid_state) {
            this.setGrid(this._state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    IsIE12Directive.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIE12Directive.prototype, "isIE12", null);
    IsIE12Directive = __decorate([
        Directive({
            selector: '[isIE12]'
        })
    ], IsIE12Directive);
    return IsIE12Directive;
}(RESPONSIVE_BASE));
export { IsIE12Directive };
var ShowIEVersionDirective = /** @class */ (function (_super) {
    __extends(ShowIEVersionDirective, _super);
    function ShowIEVersionDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowIEVersionDirective.prototype, "showIEVersion", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    ShowIEVersionDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], ShowIEVersionDirective.prototype, "showIEVersion", null);
    ShowIEVersionDirective = __decorate([
        Directive({
            selector: '[showIEVersion]'
        })
    ], ShowIEVersionDirective);
    return ShowIEVersionDirective;
}(RESPONSIVE_BASE));
export { ShowIEVersionDirective };
var HideIEVersionDirective = /** @class */ (function (_super) {
    __extends(HideIEVersionDirective, _super);
    function HideIEVersionDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideIEVersionDirective.prototype, "hideIEVersion", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'ie');
        },
        enumerable: true,
        configurable: true
    });
    HideIEVersionDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], HideIEVersionDirective.prototype, "hideIEVersion", null);
    HideIEVersionDirective = __decorate([
        Directive({
            selector: '[hideIEVersion]'
        })
    ], HideIEVersionDirective);
    return HideIEVersionDirective;
}(RESPONSIVE_BASE));
export { HideIEVersionDirective };
//# sourceMappingURL=data:application/json;base64,