import { __decorate, __extends } from "tslib";
/**
 * @name pixelratio.directives
 * @description pixelratio directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, Output, EventEmitter, TemplateRef, ViewContainerRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
/*======== 1x =========*/
var Is1xPixelDirective = /** @class */ (function (_super) {
    __extends(Is1xPixelDirective, _super);
    function Is1xPixelDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = '1x';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(Is1xPixelDirective.prototype, "is1xPixel", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    Is1xPixelDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], Is1xPixelDirective.prototype, "is1xPixel", null);
    Is1xPixelDirective = __decorate([
        Directive({
            selector: '[is1xPixel]'
        })
    ], Is1xPixelDirective);
    return Is1xPixelDirective;
}(RESPONSIVE_BASE));
export { Is1xPixelDirective };
/*======== RETINA =========*/
var IsRetinaDirective = /** @class */ (function (_super) {
    __extends(IsRetinaDirective, _super);
    function IsRetinaDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'retina';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsRetinaDirective.prototype, "isRetina", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    IsRetinaDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsRetinaDirective.prototype, "isRetina", null);
    IsRetinaDirective = __decorate([
        Directive({
            selector: '[isRetina]'
        })
    ], IsRetinaDirective);
    return IsRetinaDirective;
}(RESPONSIVE_BASE));
export { IsRetinaDirective };
/*======== 4K =========*/
var Is4kDirective = /** @class */ (function (_super) {
    __extends(Is4kDirective, _super);
    function Is4kDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = '4k';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(Is4kDirective.prototype, "isRetina", {
        set: function (grid_state) {
            this.setGrid(this._state, 'pixelratio');
        },
        enumerable: true,
        configurable: true
    });
    Is4kDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], Is4kDirective.prototype, "isRetina", null);
    Is4kDirective = __decorate([
        Directive({
            selector: '[is4k]'
        })
    ], Is4kDirective);
    return Is4kDirective;
}(RESPONSIVE_BASE));
export { Is4kDirective };
/*======== DeviceInfo =========*/
var PixelRatioInfoDirective = /** @class */ (function () {
    function PixelRatioInfoDirective(_responsiveState, viewContainer, cd, platformService) {
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._isEnabledForPlatform = null;
        this.pixelratio = new EventEmitter();
        this._isEnabledForPlatform = platformService.isEnabledForPlatform();
    }
    Object.defineProperty(PixelRatioInfoDirective.prototype, "pixelratioInfo", {
        set: function (grid_state) {
            this.updateData(this.currentstate);
        },
        enumerable: true,
        configurable: true
    });
    PixelRatioInfoDirective.prototype.ngOnInit = function () {
        if (this._isEnabledForPlatform) {
            this._subscription = this._responsiveState.pixel$.subscribe(this.updateData.bind(this));
        }
    };
    PixelRatioInfoDirective.prototype.ngOnDestroy = function () {
        if (this._isEnabledForPlatform) {
            this._subscription.unsubscribe();
        }
    };
    PixelRatioInfoDirective.prototype.updateData = function (value) {
        var update = this._ifValueChanged(this.noRepeat, value);
        if (update) {
            this.pixelratio.emit(value);
            this.cd.markForCheck();
        }
    };
    PixelRatioInfoDirective.prototype._ifValueChanged = function (oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this.noRepeat = newValue;
            return true;
        }
    };
    PixelRatioInfoDirective.ctorParameters = function () { return [
        { type: ResponsiveState },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], PixelRatioInfoDirective.prototype, "pixelratioInfo", null);
    __decorate([
        Output()
    ], PixelRatioInfoDirective.prototype, "pixelratio", void 0);
    PixelRatioInfoDirective = __decorate([
        Directive({ selector: 'pixel-ratio-info' })
    ], PixelRatioInfoDirective);
    return PixelRatioInfoDirective;
}());
export { PixelRatioInfoDirective };
//# sourceMappingURL=data:application/json;base64,