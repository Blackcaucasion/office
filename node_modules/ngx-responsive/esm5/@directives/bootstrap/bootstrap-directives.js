import { __decorate, __extends } from "tslib";
/**
 *  @name bootstrap.directives
 *  @description bootstrap directives
 *  @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var XlDirective = /** @class */ (function (_super) {
    __extends(XlDirective, _super);
    function XlDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'xl';
        _this._showWhenTrue = true;
        _this.setGrid(_this._state, 'bootstrap');
        return _this;
    }
    XlDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    XlDirective = __decorate([
        Directive({
            selector: '[xl]'
        })
    ], XlDirective);
    return XlDirective;
}(RESPONSIVE_BASE));
export { XlDirective };
var LgDirective = /** @class */ (function (_super) {
    __extends(LgDirective, _super);
    function LgDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'lg';
        _this._showWhenTrue = true;
        _this.setGrid(_this._state, 'bootstrap');
        return _this;
    }
    LgDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    LgDirective = __decorate([
        Directive({
            selector: '[lg]'
        })
    ], LgDirective);
    return LgDirective;
}(RESPONSIVE_BASE));
export { LgDirective };
var MdDirective = /** @class */ (function (_super) {
    __extends(MdDirective, _super);
    function MdDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'md';
        _this._showWhenTrue = true;
        _this.setGrid(_this._state, 'bootstrap');
        return _this;
    }
    MdDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    MdDirective = __decorate([
        Directive({
            selector: '[md]'
        })
    ], MdDirective);
    return MdDirective;
}(RESPONSIVE_BASE));
export { MdDirective };
var SmDirective = /** @class */ (function (_super) {
    __extends(SmDirective, _super);
    function SmDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'sm';
        _this._showWhenTrue = true;
        _this.setGrid(_this._state, 'bootstrap');
        return _this;
    }
    SmDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    SmDirective = __decorate([
        Directive({
            selector: '[sm]'
        })
    ], SmDirective);
    return SmDirective;
}(RESPONSIVE_BASE));
export { SmDirective };
var XsDirective = /** @class */ (function (_super) {
    __extends(XsDirective, _super);
    function XsDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'xs';
        _this._showWhenTrue = true;
        _this.setGrid(_this._state, 'bootstrap');
        return _this;
    }
    XsDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    XsDirective = __decorate([
        Directive({
            selector: '[xs]'
        })
    ], XsDirective);
    return XsDirective;
}(RESPONSIVE_BASE));
export { XsDirective };
var ShowItBootstrapDirective = /** @class */ (function (_super) {
    __extends(ShowItBootstrapDirective, _super);
    function ShowItBootstrapDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItBootstrapDirective.prototype, "showItBootstrap", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    ShowItBootstrapDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], ShowItBootstrapDirective.prototype, "showItBootstrap", null);
    ShowItBootstrapDirective = __decorate([
        Directive({
            selector: '[showItBootstrap]'
        })
    ], ShowItBootstrapDirective);
    return ShowItBootstrapDirective;
}(RESPONSIVE_BASE));
export { ShowItBootstrapDirective };
var HideItBootstrapDirective = /** @class */ (function (_super) {
    __extends(HideItBootstrapDirective, _super);
    function HideItBootstrapDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItBootstrapDirective.prototype, "hideItBootstrap", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'bootstrap');
        },
        enumerable: true,
        configurable: true
    });
    HideItBootstrapDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], HideItBootstrapDirective.prototype, "hideItBootstrap", null);
    HideItBootstrapDirective = __decorate([
        Directive({
            selector: '[hideItBootstrap]'
        })
    ], HideItBootstrapDirective);
    return HideItBootstrapDirective;
}(RESPONSIVE_BASE));
export { HideItBootstrapDirective };
//# sourceMappingURL=data:application/json;base64,