import { __decorate, __extends } from "tslib";
/**
 * @name useragent-info.directive
 * @description Useragent info directive in ngx-responsive
 *
 * @license MIT
 */
import { Output, EventEmitter, Directive, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { UserAgentInfo } from './useragent-info';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var UserAgentInfoDirective = /** @class */ (function (_super) {
    __extends(UserAgentInfoDirective, _super);
    function UserAgentInfoDirective(_responsiveState, cd, platformService) {
        var _this = _super.call(this, _responsiveState, platformService) || this;
        _this._responsiveState = _responsiveState;
        _this.cd = cd;
        _this.info = new EventEmitter();
        return _this;
    }
    UserAgentInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    UserAgentInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    UserAgentInfoDirective.prototype._emitUserAgent = function (value) {
        this.info.emit(value);
        this.cd.markForCheck();
    };
    UserAgentInfoDirective.ctorParameters = function () { return [
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Output()
    ], UserAgentInfoDirective.prototype, "info", void 0);
    UserAgentInfoDirective = __decorate([
        Directive({
            selector: 'user-agent-info'
        })
    ], UserAgentInfoDirective);
    return UserAgentInfoDirective;
}(UserAgentInfo));
export { UserAgentInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcmFnZW50LWluZm8uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJAZGlyZWN0aXZlcy91c2VyYWdlbnQvdXNlcmFnZW50LWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBTTFGO0lBQTRDLDBDQUFhO0lBRXJELGdDQUNXLGdCQUFpQyxFQUNqQyxFQUFxQixFQUM1QixlQUFnQztRQUhwQyxZQUlJLGtCQUFNLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxTQUFHO1FBSHBDLHNCQUFnQixHQUFoQixnQkFBZ0IsQ0FBaUI7UUFDakMsUUFBRSxHQUFGLEVBQUUsQ0FBbUI7UUFIdEIsVUFBSSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDOztJQUtULENBQUM7SUFDeEMseUNBQVEsR0FBZjtRQUNJLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBQ00sNENBQVcsR0FBbEI7UUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNTLCtDQUFjLEdBQXhCLFVBQTJCLEtBQVU7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkFiNEIsZUFBZTtnQkFDN0IsaUJBQWlCO2dCQUNYLGVBQWU7O0lBSjFCO1FBQVQsTUFBTSxFQUFFO3dEQUE4QztJQUQ5QyxzQkFBc0I7UUFKbEMsU0FBUyxDQUNWO1lBQ0ksUUFBUSxFQUFFLGlCQUFpQjtTQUM5QixDQUFDO09BQ1csc0JBQXNCLENBaUJsQztJQUFELDZCQUFDO0NBQUEsQUFqQkQsQ0FBNEMsYUFBYSxHQWlCeEQ7U0FqQlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIHVzZXJhZ2VudC1pbmZvLmRpcmVjdGl2ZVxyXG4gKiBAZGVzY3JpcHRpb24gVXNlcmFnZW50IGluZm8gZGlyZWN0aXZlIGluIG5neC1yZXNwb25zaXZlXHJcbiAqXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuaW1wb3J0IHsgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBVc2VyQWdlbnRJbmZvIH0gZnJvbSAnLi91c2VyYWdlbnQtaW5mbyc7XHJcbmltcG9ydCB7IFBsYXRmb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9wbGF0Zm9ybS1zZXJ2aWNlL3BsYXRmb3JtLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZShcclxue1xyXG4gICAgc2VsZWN0b3I6ICd1c2VyLWFnZW50LWluZm8nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBVc2VyQWdlbnRJbmZvRGlyZWN0aXZlIGV4dGVuZHMgVXNlckFnZW50SW5mbyBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBPdXRwdXQoKSBpbmZvOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHB1YmxpYyBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHVibGljIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgKSB7IHN1cGVyKF9yZXNwb25zaXZlU3RhdGUsIHBsYXRmb3JtU2VydmljZSk7IH1cclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRpc2Nvbm5lY3QoKTtcclxuICAgIH1cclxuICAgIHByb3RlY3RlZCBfZW1pdFVzZXJBZ2VudCAoIHZhbHVlOiBhbnkgKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbmZvLmVtaXQoIHZhbHVlICk7XHJcbiAgICAgICAgdGhpcy5jZC5tYXJrRm9yQ2hlY2soKTtcclxuICAgIH1cclxufVxyXG4iXX0=