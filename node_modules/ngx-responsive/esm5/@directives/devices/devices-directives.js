import { __decorate, __extends } from "tslib";
/**
 * @name devices.directives
 * @description Devices directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var IsSmartTvDirective = /** @class */ (function (_super) {
    __extends(IsSmartTvDirective, _super);
    function IsSmartTvDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'smarttv';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsSmartTvDirective.prototype, "isSmartTv", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    IsSmartTvDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsSmartTvDirective.prototype, "isSmartTv", null);
    IsSmartTvDirective = __decorate([
        Directive({
            selector: '[isSmartTv]'
        })
    ], IsSmartTvDirective);
    return IsSmartTvDirective;
}(RESPONSIVE_BASE));
export { IsSmartTvDirective };
var IsDesktopDirective = /** @class */ (function (_super) {
    __extends(IsDesktopDirective, _super);
    function IsDesktopDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'desktop';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsDesktopDirective.prototype, "isDesktop", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    IsDesktopDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsDesktopDirective.prototype, "isDesktop", null);
    IsDesktopDirective = __decorate([
        Directive({
            selector: '[isDesktop]'
        })
    ], IsDesktopDirective);
    return IsDesktopDirective;
}(RESPONSIVE_BASE));
export { IsDesktopDirective };
var IsTabletDirective = /** @class */ (function (_super) {
    __extends(IsTabletDirective, _super);
    function IsTabletDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'tablet';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsTabletDirective.prototype, "isTablet", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    IsTabletDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsTabletDirective.prototype, "isTablet", null);
    IsTabletDirective = __decorate([
        Directive({
            selector: '[isTablet]'
        })
    ], IsTabletDirective);
    return IsTabletDirective;
}(RESPONSIVE_BASE));
export { IsTabletDirective };
var IsMobileDirective = /** @class */ (function (_super) {
    __extends(IsMobileDirective, _super);
    function IsMobileDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'mobile';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsMobileDirective.prototype, "isMobile", {
        set: function (grid_state) {
            this.setGrid(this._state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    IsMobileDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsMobileDirective.prototype, "isMobile", null);
    IsMobileDirective = __decorate([
        Directive({
            selector: '[isMobile]'
        })
    ], IsMobileDirective);
    return IsMobileDirective;
}(RESPONSIVE_BASE));
export { IsMobileDirective };
var ShowItDeviceDirective = /** @class */ (function (_super) {
    __extends(ShowItDeviceDirective, _super);
    function ShowItDeviceDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItDeviceDirective.prototype, "showItDevice", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    ShowItDeviceDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], ShowItDeviceDirective.prototype, "showItDevice", null);
    ShowItDeviceDirective = __decorate([
        Directive({
            selector: '[showItDevice]'
        })
    ], ShowItDeviceDirective);
    return ShowItDeviceDirective;
}(RESPONSIVE_BASE));
export { ShowItDeviceDirective };
var HideItDeviceDirective = /** @class */ (function (_super) {
    __extends(HideItDeviceDirective, _super);
    function HideItDeviceDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItDeviceDirective.prototype, "hideItDevice", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'device');
        },
        enumerable: true,
        configurable: true
    });
    HideItDeviceDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], HideItDeviceDirective.prototype, "hideItDevice", null);
    HideItDeviceDirective = __decorate([
        Directive({
            selector: '[hideItDevice]'
        })
    ], HideItDeviceDirective);
    return HideItDeviceDirective;
}(RESPONSIVE_BASE));
export { HideItDeviceDirective };
var IsIphoneDirective = /** @class */ (function (_super) {
    __extends(IsIphoneDirective, _super);
    function IsIphoneDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'iphone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIphoneDirective.prototype, "isIphone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    IsIphoneDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIphoneDirective.prototype, "isIphone", null);
    IsIphoneDirective = __decorate([
        Directive({
            selector: '[isIphone]'
        })
    ], IsIphoneDirective);
    return IsIphoneDirective;
}(RESPONSIVE_BASE));
export { IsIphoneDirective };
var IsIpadDirective = /** @class */ (function (_super) {
    __extends(IsIpadDirective, _super);
    function IsIpadDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'iphone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsIpadDirective.prototype, "isIphone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    IsIpadDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsIpadDirective.prototype, "isIphone", null);
    IsIpadDirective = __decorate([
        Directive({
            selector: '[isIpad]'
        })
    ], IsIpadDirective);
    return IsIpadDirective;
}(RESPONSIVE_BASE));
export { IsIpadDirective };
var IsAndroidMobileDirective = /** @class */ (function (_super) {
    __extends(IsAndroidMobileDirective, _super);
    function IsAndroidMobileDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'android mobile';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsAndroidMobileDirective.prototype, "isAndroidMobile", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    IsAndroidMobileDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsAndroidMobileDirective.prototype, "isAndroidMobile", null);
    IsAndroidMobileDirective = __decorate([
        Directive({
            selector: '[isAndroidMobile]'
        })
    ], IsAndroidMobileDirective);
    return IsAndroidMobileDirective;
}(RESPONSIVE_BASE));
export { IsAndroidMobileDirective };
var IsAndroidTabletDirective = /** @class */ (function (_super) {
    __extends(IsAndroidTabletDirective, _super);
    function IsAndroidTabletDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'android tablet';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsAndroidTabletDirective.prototype, "isAndroidTablet", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    IsAndroidTabletDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsAndroidTabletDirective.prototype, "isAndroidTablet", null);
    IsAndroidTabletDirective = __decorate([
        Directive({
            selector: '[isAndroidTablet]'
        })
    ], IsAndroidTabletDirective);
    return IsAndroidTabletDirective;
}(RESPONSIVE_BASE));
export { IsAndroidTabletDirective };
var IsWindowsPhoneDirective = /** @class */ (function (_super) {
    __extends(IsWindowsPhoneDirective, _super);
    function IsWindowsPhoneDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'windows phone';
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(IsWindowsPhoneDirective.prototype, "isWindowsPhone", {
        set: function (grid_state) {
            this.setGrid(this._state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    IsWindowsPhoneDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsWindowsPhoneDirective.prototype, "isWindowsPhone", null);
    IsWindowsPhoneDirective = __decorate([
        Directive({
            selector: '[isWindowsPhone]'
        })
    ], IsWindowsPhoneDirective);
    return IsWindowsPhoneDirective;
}(RESPONSIVE_BASE));
export { IsWindowsPhoneDirective };
var ShowItStandardDirective = /** @class */ (function (_super) {
    __extends(ShowItStandardDirective, _super);
    function ShowItStandardDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = true;
        return _this;
    }
    Object.defineProperty(ShowItStandardDirective.prototype, "showItStandard", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    ShowItStandardDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], ShowItStandardDirective.prototype, "showItStandard", null);
    ShowItStandardDirective = __decorate([
        Directive({
            selector: '[showItStandard]'
        })
    ], ShowItStandardDirective);
    return ShowItStandardDirective;
}(RESPONSIVE_BASE));
export { ShowItStandardDirective };
var HideItStandardDirective = /** @class */ (function (_super) {
    __extends(HideItStandardDirective, _super);
    function HideItStandardDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(HideItStandardDirective.prototype, "hideItStandard", {
        set: function (grid_state) {
            this.setGrid(grid_state, 'standard');
        },
        enumerable: true,
        configurable: true
    });
    HideItStandardDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], HideItStandardDirective.prototype, "hideItStandard", null);
    HideItStandardDirective = __decorate([
        Directive({
            selector: '[hideItStandard]'
        })
    ], HideItStandardDirective);
    return HideItStandardDirective;
}(RESPONSIVE_BASE));
export { HideItStandardDirective };
var IsPortraitDirective = /** @class */ (function (_super) {
    __extends(IsPortraitDirective, _super);
    function IsPortraitDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'portrait';
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(IsPortraitDirective.prototype, "isPortrait", {
        set: function (grid_state) {
            this.setGrid(this._state, 'orientation');
        },
        enumerable: true,
        configurable: true
    });
    IsPortraitDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsPortraitDirective.prototype, "isPortrait", null);
    IsPortraitDirective = __decorate([
        Directive({
            selector: '[isPortrait]'
        })
    ], IsPortraitDirective);
    return IsPortraitDirective;
}(RESPONSIVE_BASE));
export { IsPortraitDirective };
var IsLandscapeDirective = /** @class */ (function (_super) {
    __extends(IsLandscapeDirective, _super);
    function IsLandscapeDirective(templateRef, viewContainer, _responsiveState, cd, platformService) {
        var _this = _super.call(this, templateRef, viewContainer, _responsiveState, cd, platformService) || this;
        _this._state = 'landscape';
        _this._showWhenTrue = false;
        return _this;
    }
    Object.defineProperty(IsLandscapeDirective.prototype, "isLandscape", {
        set: function (grid_state) {
            this.setGrid(this._state, 'orientation');
        },
        enumerable: true,
        configurable: true
    });
    IsLandscapeDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: ResponsiveState },
        { type: ChangeDetectorRef },
        { type: PlatformService }
    ]; };
    __decorate([
        Input()
    ], IsLandscapeDirective.prototype, "isLandscape", null);
    IsLandscapeDirective = __decorate([
        Directive({
            selector: '[isLandscape]'
        })
    ], IsLandscapeDirective);
    return IsLandscapeDirective;
}(RESPONSIVE_BASE));
export { IsLandscapeDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlcy1kaXJlY3RpdmVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXJlc3BvbnNpdmUvIiwic291cmNlcyI6WyJAZGlyZWN0aXZlcy9kZXZpY2VzL2RldmljZXMtZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFLMUY7SUFBd0Msc0NBQW9CO0lBUXhELDRCQUFhLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLGdCQUFpQyxFQUNqQyxFQUFxQixFQUNyQixlQUFnQztRQUo3QyxZQU1JLGtCQUFPLFdBQVcsRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsRUFBRSxFQUFFLGVBQWUsQ0FBRSxTQUM3RTtRQWJTLFlBQU0sR0FBRyxTQUFTLENBQUM7UUFDbkIsbUJBQWEsR0FBRyxJQUFJLENBQUM7O0lBWS9CLENBQUM7SUFWUSxzQkFBSSx5Q0FBUzthQUFiLFVBQWUsVUFBMkI7WUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBRSxDQUFDO1FBQzFDLENBQUM7OztPQUFBOztnQkFDeUIsV0FBVztnQkFDVCxnQkFBZ0I7Z0JBQ2IsZUFBZTtnQkFDN0IsaUJBQWlCO2dCQUNKLGVBQWU7O0lBUHBDO1FBQVIsS0FBSyxFQUFFO3VEQUVQO0lBUFEsa0JBQWtCO1FBSDlCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1NBQzFCLENBQUM7T0FDVyxrQkFBa0IsQ0FnQjlCO0lBQUQseUJB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b0I7SUFRMUQsOEJBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ3JCLGVBQWdDO1FBSjdDLFlBTUksa0JBQU8sV0FBVyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsZUFBZSxDQUFFLFNBQzdFO1FBYlMsWUFBTSxHQUFHLFdBQVcsQ0FBQztRQUNyQixtQkFBYSxHQUFHLEtBQUssQ0FBQzs7SUFZaEMsQ0FBQztJQVZRLHNCQUFJLDZDQUFXO2FBQWYsVUFBaUIsVUFBa0I7WUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBRSxDQUFDO1FBQy9DLENBQUM7OztPQUFBOztnQkFDeUIsV0FBVztnQkFDVCxnQkFBZ0I7Z0JBQ2IsZUFBZTtnQkFDN0IsaUJBQWlCO2dCQUNKLGVBQWU7O0lBUHBDO1FBQVIsS0FBSyxFQUFFOzJEQUVQO0lBUFEsb0JBQW9CO1FBSmhDLFNBQVMsQ0FDVjtZQUNJLFFBQVEsRUFBRSxlQUFlO1NBQzVCLENBQUM7T0FDVyxvQkFBb0IsQ0FnQmhDO0lBQUQsMkJBQUM7Q0FBQSxBQWhCRCxDQUEwQyxlQUFlLEdBZ0J4RDtTQWhCWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUgZGV2aWNlcy5kaXJlY3RpdmVzXHJcbiAqIEBkZXNjcmlwdGlvbiBEZXZpY2VzIGRpcmVjdGl2ZXMgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBSRVNQT05TSVZFX0JBU0UgfSBmcm9tICcuLi8uLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1iYXNlL3Jlc3BvbnNpdmUtYmFzZSc7XHJcbmltcG9ydCB7IFBsYXRmb3JtU2VydmljZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9wbGF0Zm9ybS1zZXJ2aWNlL3BsYXRmb3JtLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tpc1NtYXJ0VHZdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNTbWFydFR2RGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnc21hcnR0dic7XHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGlzU21hcnRUdiggZ3JpZF9zdGF0ZTogc3RyaW5nW118c3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggdGhpcy5fc3RhdGUsICdkZXZpY2UnICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbaXNEZXNrdG9wXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRGVza3RvcERpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3N0YXRlID0gJ2Rlc2t0b3AnO1xyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBpc0Rlc2t0b3AoIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggdGhpcy5fc3RhdGUsICdkZXZpY2UnICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbaXNUYWJsZXRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNUYWJsZXREaXJlY3RpdmUgZXh0ZW5kcyBSRVNQT05TSVZFX0JBU0U8YW55PiB7XHJcblxyXG4gICAgcHJvdGVjdGVkIF9zdGF0ZSA9ICd0YWJsZXQnO1xyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBpc1RhYmxldCggZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKCB0aGlzLl9zdGF0ZSwgJ2RldmljZScgKTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICAgcGxhdGZvcm1TZXJ2aWNlOiBQbGF0Zm9ybVNlcnZpY2VcclxuICAgICAgICApIHtcclxuICAgICAgICBzdXBlciggdGVtcGxhdGVSZWYsIHZpZXdDb250YWluZXIsIF9yZXNwb25zaXZlU3RhdGUsIGNkLCBwbGF0Zm9ybVNlcnZpY2UgKTtcclxuICAgIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tpc01vYmlsZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc01vYmlsZURpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3N0YXRlID0gJ21vYmlsZSc7XHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGlzTW9iaWxlKCBncmlkX3N0YXRlOiBzdHJpbmdbXSB8IHN0cmluZyApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoIHRoaXMuX3N0YXRlLCAnZGV2aWNlJyApO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1tzaG93SXREZXZpY2VdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hvd0l0RGV2aWNlRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgc2hvd0l0RGV2aWNlKCBncmlkX3N0YXRlOiBzdHJpbmdbXSB8IHN0cmluZyApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoIGdyaWRfc3RhdGUsICdkZXZpY2UnICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbaGlkZUl0RGV2aWNlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZGVJdERldmljZURpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IGZhbHNlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBoaWRlSXREZXZpY2UoIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nIClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoIGdyaWRfc3RhdGUsICdkZXZpY2UnICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW2lzSXBob25lXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzSXBob25lRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnaXBob25lJztcclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaXNJcGhvbmUoIGdyaWRfc3RhdGU6IHN0cmluZ1tdfHN0cmluZyApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQodGhpcy5fc3RhdGUsICdzdGFuZGFyZCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1tpc0lwYWRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNJcGFkRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnaXBob25lJztcclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgaXNJcGhvbmUoZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKCB0aGlzLl9zdGF0ZSwgJ3N0YW5kYXJkJyApO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1tpc0FuZHJvaWRNb2JpbGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNBbmRyb2lkTW9iaWxlRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnYW5kcm9pZCBtb2JpbGUnO1xyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBpc0FuZHJvaWRNb2JpbGUoIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCh0aGlzLl9zdGF0ZSwgJ3N0YW5kYXJkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1tpc0FuZHJvaWRUYWJsZXRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNBbmRyb2lkVGFibGV0RGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnYW5kcm9pZCB0YWJsZXQnO1xyXG4gICAgcHJvdGVjdGVkIF9zaG93V2hlblRydWUgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBpc0FuZHJvaWRUYWJsZXQoIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggdGhpcy5fc3RhdGUsICdzdGFuZGFyZCcgKTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICAgcGxhdGZvcm1TZXJ2aWNlOiBQbGF0Zm9ybVNlcnZpY2VcclxuICAgICAgICApIHtcclxuICAgICAgICBzdXBlciggdGVtcGxhdGVSZWYsIHZpZXdDb250YWluZXIsIF9yZXNwb25zaXZlU3RhdGUsIGNkLCBwbGF0Zm9ybVNlcnZpY2UgKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW2lzV2luZG93c1Bob25lXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzV2luZG93c1Bob25lRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnd2luZG93cyBwaG9uZSc7XHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGlzV2luZG93c1Bob25lKGdyaWRfc3RhdGU6IHN0cmluZ1tdfHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggdGhpcy5fc3RhdGUsICdzdGFuZGFyZCcgKTtcclxuICAgIH1cclxuICAgIGNvbnN0cnVjdG9yKCB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PixcclxuICAgICAgICAgICAgICAgICB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgICAgICAgICAgIF9yZXNwb25zaXZlU3RhdGU6IFJlc3BvbnNpdmVTdGF0ZSxcclxuICAgICAgICAgICAgICAgICBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgICAgICAgICAgcGxhdGZvcm1TZXJ2aWNlOiBQbGF0Zm9ybVNlcnZpY2VcclxuICAgICAgICApIHtcclxuICAgICAgICBzdXBlciggdGVtcGxhdGVSZWYsIHZpZXdDb250YWluZXIsIF9yZXNwb25zaXZlU3RhdGUsIGNkLCBwbGF0Zm9ybVNlcnZpY2UgKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW3Nob3dJdFN0YW5kYXJkXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3dJdFN0YW5kYXJkRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgc2hvd0l0U3RhbmRhcmQoIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZCggZ3JpZF9zdGF0ZSwgJ3N0YW5kYXJkJyApO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKFxyXG57XHJcbiAgICBzZWxlY3RvcjogJ1toaWRlSXRTdGFuZGFyZF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBIaWRlSXRTdGFuZGFyZERpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3Nob3dXaGVuVHJ1ZSA9IGZhbHNlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNldCBoaWRlSXRTdGFuZGFyZCggZ3JpZF9zdGF0ZTogc3RyaW5nW10gfCBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKCBncmlkX3N0YXRlLCAnc3RhbmRhcmQnICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW2lzUG9ydHJhaXRdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNQb3J0cmFpdERpcmVjdGl2ZSBleHRlbmRzIFJFU1BPTlNJVkVfQkFTRTxhbnk+IHtcclxuXHJcbiAgICBwcm90ZWN0ZWQgX3N0YXRlID0gJ3BvcnRyYWl0JztcclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gZmFsc2U7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGlzUG9ydHJhaXQoIGdyaWRfc3RhdGU6IHN0cmluZyApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoIHRoaXMuX3N0YXRlLCAnb3JpZW50YXRpb24nICk7XHJcbiAgICB9XHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW2lzTGFuZHNjYXBlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTGFuZHNjYXBlRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc3RhdGUgPSAnbGFuZHNjYXBlJztcclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gZmFsc2U7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGlzTGFuZHNjYXBlKCBncmlkX3N0YXRlOiBzdHJpbmcgKSB7XHJcbiAgICAgICAgdGhpcy5zZXRHcmlkKCB0aGlzLl9zdGF0ZSwgJ29yaWVudGF0aW9uJyApO1xyXG4gICAgfVxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==