import { __decorate, __extends, __param } from "tslib";
/**
 * @name devices-info.directive
 * @description devices-info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Output, ViewContainerRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { DevicesInfo } from './devices-info';
var DeviceInfoDirective = /** @class */ (function (_super) {
    __extends(DeviceInfoDirective, _super);
    function DeviceInfoDirective(_responsiveState, viewContainer, cd, _platformId) {
        var _this = _super.call(this, _responsiveState, _platformId) || this;
        _this._responsiveState = _responsiveState;
        _this.viewContainer = viewContainer;
        _this.cd = cd;
        _this._platformId = _platformId;
        _this.device = new EventEmitter();
        return _this;
    }
    DeviceInfoDirective.prototype.ngOnInit = function () {
        this.connect();
    };
    DeviceInfoDirective.prototype.ngOnDestroy = function () {
        this.disconnect();
    };
    DeviceInfoDirective.prototype._updateData = function (value) {
        this.device.emit(value);
        this.cd.markForCheck();
    };
    DeviceInfoDirective.ctorParameters = function () { return [
        { type: ResponsiveState },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Output()
    ], DeviceInfoDirective.prototype, "device", void 0);
    DeviceInfoDirective = __decorate([
        Directive({ selector: 'device-info' }),
        __param(3, Inject(PLATFORM_ID))
    ], DeviceInfoDirective);
    return DeviceInfoDirective;
}(DevicesInfo));
export { DeviceInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlcy1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvZGV2aWNlcy9kZXZpY2VzLWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hILE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx5REFBeUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0M7SUFBeUMsdUNBQVc7SUFFaEQsNkJBQXNCLGdCQUFpQyxFQUN6QyxhQUErQixFQUMvQixFQUFxQixFQUNBLFdBQVc7UUFIOUMsWUFJSSxrQkFBTSxnQkFBZ0IsRUFBRSxXQUFXLENBQUMsU0FBRztRQUpyQixzQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQ3pDLG1CQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQixRQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUNBLGlCQUFXLEdBQVgsV0FBVyxDQUFBO1FBSnBDLFlBQU0sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQzs7SUFLZixDQUFDO0lBQzNDLHNDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQUNELHlDQUFXLEdBQVg7UUFDSSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUNTLHlDQUFXLEdBQXJCLFVBQXNCLEtBQVU7UUFDNUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMzQixDQUFDOztnQkFkdUMsZUFBZTtnQkFDMUIsZ0JBQWdCO2dCQUMzQixpQkFBaUI7Z0RBQzlCLE1BQU0sU0FBQyxXQUFXOztJQUpiO1FBQVQsTUFBTSxFQUFFO3VEQUFnRDtJQURoRCxtQkFBbUI7UUFEL0IsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLGFBQWEsRUFBRSxDQUFDO1FBTTlCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BTGYsbUJBQW1CLENBaUIvQjtJQUFELDBCQUFDO0NBQUEsQUFqQkQsQ0FBeUMsV0FBVyxHQWlCbkQ7U0FqQlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIGRldmljZXMtaW5mby5kaXJlY3RpdmVcclxuICogQGRlc2NyaXB0aW9uIGRldmljZXMtaW5mbyBkaXJlY3RpdmUgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIE9uRGVzdHJveSwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUExBVEZPUk1fSUQsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcbmltcG9ydCB7IERldmljZXNJbmZvIH0gZnJvbSAnLi9kZXZpY2VzLWluZm8nO1xyXG5cclxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnZGV2aWNlLWluZm8nIH0pXHJcbmV4cG9ydCBjbGFzcyBEZXZpY2VJbmZvRGlyZWN0aXZlIGV4dGVuZHMgRGV2aWNlc0luZm8gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XHJcbiAgICBAT3V0cHV0KCkgZGV2aWNlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgcHJvdGVjdGVkIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgX3BsYXRmb3JtSWRcclxuICAgICkgeyBzdXBlcihfcmVzcG9uc2l2ZVN0YXRlLCBfcGxhdGZvcm1JZCk7IH1cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZURhdGEodmFsdWU6IGFueSkge1xyXG4gICAgICAgIHRoaXMuZGV2aWNlLmVtaXQodmFsdWUpO1xyXG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcbn1cclxuIl19