import { __decorate } from "tslib";
/**
 * @name responsive-window
 * @description responsiveWindow Directive in ngx-responsive
 *
 * @license MIT
 */
import { DoCheck, Directive, Input, ElementRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { ResponsiveConfig } from "../../@core/providers/responsive-config/responsive-config";
import { map } from "rxjs/operators";
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
var ResponsiveWindowDirective = /** @class */ (function () {
    function ResponsiveWindowDirective(_responsiveState, el, cd, platformService, _responsiveConfig) {
        this._responsiveState = _responsiveState;
        this.el = el;
        this.cd = cd;
        this._responsiveConfig = _responsiveConfig;
        this._isEnabledForPlatform = null;
        this._isEnabledForPlatform = platformService.isEnabledForPlatform();
        if (this._isEnabledForPlatform) {
            this.element = el.nativeElement;
        }
        this.currentBreakpoint$ = this._responsiveState
            .ancho$
            .pipe(map(this.getCurrentBreakpoint.bind(this)));
    }
    ResponsiveWindowDirective.prototype.ngOnInit = function () {
        if (this._isEnabledForPlatform) {
            this._responsiveState.registerWindow(this);
        }
    };
    ResponsiveWindowDirective.prototype.ngDoCheck = function () {
        if (this._isEnabledForPlatform) {
            var _update = this._ifValueChanged(this._noRepeat, this.name);
            if (_update) {
                this._responsiveState.unregisterWindow(this);
                this._responsiveState.registerWindow(this);
                this.cd.markForCheck();
            }
        }
    };
    ResponsiveWindowDirective.prototype.ngOnDestroy = function () {
        if (this._isEnabledForPlatform) {
            this._responsiveState.unregisterWindow(this);
        }
    };
    ResponsiveWindowDirective.prototype.getWidth = function () {
        return (this._isEnabledForPlatform) ? this.element.offsetWidth : 0;
    };
    ResponsiveWindowDirective.prototype.getCurrentBreakpoint = function () {
        var width = this.getWidth();
        // console.error("getCurrentBreakpoint", width)
        if (this._responsiveConfig.config.breakPoints.xl.min <= width) {
            return 'xl';
        }
        else if (this._responsiveConfig.config.breakPoints.lg.max >= width && this._responsiveConfig.config.breakPoints.lg.min <= width) {
            return 'lg';
        }
        else if (this._responsiveConfig.config.breakPoints.md.max >= width && this._responsiveConfig.config.breakPoints.md.min <= width) {
            return 'md';
        }
        else if (this._responsiveConfig.config.breakPoints.sm.max >= width && this._responsiveConfig.config.breakPoints.sm.min <= width) {
            return 'sm';
        }
        else if (this._responsiveConfig.config.breakPoints.xs.max >= width) {
            return 'xs';
        }
    };
    ResponsiveWindowDirective.prototype._ifValueChanged = function (oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this._noRepeat = newValue;
            return true;
        }
    };
    ResponsiveWindowDirective.ctorParameters = function () { return [
        { type: ResponsiveState },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: PlatformService },
        { type: ResponsiveConfig }
    ]; };
    __decorate([
        Input('responsive-window')
    ], ResponsiveWindowDirective.prototype, "name", void 0);
    ResponsiveWindowDirective = __decorate([
        Directive({
            selector: "[responsive-window]",
            exportAs: "container"
        })
    ], ResponsiveWindowDirective);
    return ResponsiveWindowDirective;
}());
export { ResponsiveWindowDirective };
//# sourceMappingURL=data:application/json;base64,