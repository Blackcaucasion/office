/**
 * @name responsive.module
 * @description Core module in ngx-responsive
 *
 * @author Manu Cutillas
 * @license MIT
 */
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { ResponsiveState } from './@core/providers/responsive-state/responsive-state';
import { ResponsiveConfig } from './@core/providers/responsive-config/responsive-config';
import { InjectionToken } from '@angular/core';
import { BOOTSTRAP_DIRECTIVES } from './@directives/bootstrap/index';
import { BROWSER_DIRECTIVES, BROWSER_INFO_RX, IE_INFO_RX } from './@directives/browsers/index';
import { CUSTOMSIZES_DIRECTIVES } from './@directives/custom-sizes/index';
import { DEVICES_DIRECTIVES, DEVICES_INFO_RX } from './@directives/devices/index';
import { PIXELRATIO_DIRECTIVES } from './@directives/pixelratio/index';
import { RESPONSIVE_DIRECTIVE } from './@directives/responsive/index';
import { RESPONSIVE_SIZE_INFO_DIRECTIVE, RESPONSIVE_SIZE_INFO_RX } from './@directives/responsive-size-info/index';
import { RESPONSIVEWINDOW_DIRECTIVE } from './@directives/responsive-window/index';
import { USERAGENT_INFO_DIRECTIVE, USERAGENT_INFO_RX } from './@directives/useragent/index';
import { PlatformService } from './@core/providers/platform-service/platform.service';
export var RESPONSIVE_CONFIGURATION = new InjectionToken('config');
export function responsiveConfiguration(config) {
    return new ResponsiveConfig(config);
}
var ResponsiveModule = /** @class */ (function () {
    function ResponsiveModule() {
    }
    ResponsiveModule_1 = ResponsiveModule;
    ResponsiveModule.forRoot = function (config) {
        if (config === void 0) { config = null; }
        return {
            ngModule: ResponsiveModule_1,
            providers: [{
                    provide: RESPONSIVE_CONFIGURATION,
                    useValue: (config !== null) ? config : {
                        breakPoints: {
                            xs: { max: 767 },
                            sm: { min: 768, max: 991 },
                            md: { min: 992, max: 1199 },
                            lg: { min: 1200, max: 1599 },
                            xl: { min: 1600 }
                        },
                        debounceTime: 100,
                        renderOnServer: false
                    }
                }, {
                    provide: ResponsiveConfig,
                    useFactory: responsiveConfiguration,
                    deps: [RESPONSIVE_CONFIGURATION]
                },
                ResponsiveState,
                PlatformService,
                RESPONSIVE_SIZE_INFO_RX,
                USERAGENT_INFO_RX,
                BROWSER_INFO_RX,
                IE_INFO_RX,
                DEVICES_INFO_RX]
        };
    };
    var ResponsiveModule_1;
    ResponsiveModule = ResponsiveModule_1 = __decorate([
        NgModule({
            declarations: [
                BOOTSTRAP_DIRECTIVES,
                BROWSER_DIRECTIVES,
                CUSTOMSIZES_DIRECTIVES,
                DEVICES_DIRECTIVES,
                PIXELRATIO_DIRECTIVES,
                RESPONSIVE_DIRECTIVE,
                RESPONSIVEWINDOW_DIRECTIVE,
                USERAGENT_INFO_DIRECTIVE,
                RESPONSIVE_SIZE_INFO_DIRECTIVE
            ],
            exports: [
                BOOTSTRAP_DIRECTIVES,
                BROWSER_DIRECTIVES,
                CUSTOMSIZES_DIRECTIVES,
                DEVICES_DIRECTIVES,
                PIXELRATIO_DIRECTIVES,
                RESPONSIVE_DIRECTIVE,
                RESPONSIVEWINDOW_DIRECTIVE,
                USERAGENT_INFO_DIRECTIVE,
                RESPONSIVE_SIZE_INFO_DIRECTIVE
            ]
        })
    ], ResponsiveModule);
    return ResponsiveModule;
}());
export { ResponsiveModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbInJlc3BvbnNpdmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7QUFFSCxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDdEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFDekYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQy9GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNsRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsOEJBQThCLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuSCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUU1RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scURBQXFELENBQUM7QUFDdEYsTUFBTSxDQUFDLElBQU0sd0JBQXdCLEdBQUcsSUFBSSxjQUFjLENBQW9CLFFBQVEsQ0FBQyxDQUFDO0FBRXhGLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxNQUF5QjtJQUM3RCxPQUFPLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQTJCRDtJQUFBO0lBK0JBLENBQUM7eUJBL0JZLGdCQUFnQjtJQUNYLHdCQUFPLEdBQXJCLFVBQXNCLE1BQWdDO1FBQWhDLHVCQUFBLEVBQUEsYUFBZ0M7UUFDbEQsT0FBTztZQUNILFFBQVEsRUFBRSxrQkFBZ0I7WUFDMUIsU0FBUyxFQUFFLENBQWE7b0JBQ3BCLE9BQU8sRUFBRSx3QkFBd0I7b0JBQ2pDLFFBQVEsRUFBRSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDbkMsV0FBVyxFQUFFOzRCQUNULEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUU7NEJBQ2hCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTs0QkFDMUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFOzRCQUMzQixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7NEJBQzVCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7eUJBQ3BCO3dCQUNELFlBQVksRUFBRSxHQUFHO3dCQUNqQixjQUFjLEVBQUUsS0FBSztxQkFDSDtpQkFDekIsRUFBQztvQkFDRSxPQUFPLEVBQUUsZ0JBQWdCO29CQUN6QixVQUFVLEVBQUUsdUJBQXVCO29CQUNuQyxJQUFJLEVBQUMsQ0FBQyx3QkFBd0IsQ0FBQztpQkFDbEM7Z0JBQ0QsZUFBZTtnQkFDZixlQUFlO2dCQUNmLHVCQUF1QjtnQkFDdkIsaUJBQWlCO2dCQUNqQixlQUFlO2dCQUNmLFVBQVU7Z0JBQ1YsZUFBZSxDQUFDO1NBQ25CLENBQUM7SUFDTixDQUFDOztJQTlCUSxnQkFBZ0I7UUExQjVCLFFBQVEsQ0FBQztZQUNOLFlBQVksRUFDUjtnQkFDSSxvQkFBb0I7Z0JBQ3BCLGtCQUFrQjtnQkFDbEIsc0JBQXNCO2dCQUN0QixrQkFBa0I7Z0JBQ2xCLHFCQUFxQjtnQkFDckIsb0JBQW9CO2dCQUNwQiwwQkFBMEI7Z0JBQzFCLHdCQUF3QjtnQkFDeEIsOEJBQThCO2FBQ2pDO1lBQ0wsT0FBTyxFQUNIO2dCQUNJLG9CQUFvQjtnQkFDcEIsa0JBQWtCO2dCQUNsQixzQkFBc0I7Z0JBQ3RCLGtCQUFrQjtnQkFDbEIscUJBQXFCO2dCQUNyQixvQkFBb0I7Z0JBQ3BCLDBCQUEwQjtnQkFDMUIsd0JBQXdCO2dCQUN4Qiw4QkFBOEI7YUFDakM7U0FDUixDQUFDO09BQ1csZ0JBQWdCLENBK0I1QjtJQUFELHVCQUFDO0NBQUEsQUEvQkQsSUErQkM7U0EvQlksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIHJlc3BvbnNpdmUubW9kdWxlXHJcbiAqIEBkZXNjcmlwdGlvbiBDb3JlIG1vZHVsZSBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAYXV0aG9yIE1hbnUgQ3V0aWxsYXNcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi9AY29yZS9wcm92aWRlcnMvcmVzcG9uc2l2ZS1zdGF0ZS9yZXNwb25zaXZlLXN0YXRlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZUNvbmZpZyB9IGZyb20gJy4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtY29uZmlnL3Jlc3BvbnNpdmUtY29uZmlnJztcclxuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQk9PVFNUUkFQX0RJUkVDVElWRVMgfSBmcm9tICcuL0BkaXJlY3RpdmVzL2Jvb3RzdHJhcC9pbmRleCc7XHJcbmltcG9ydCB7IEJST1dTRVJfRElSRUNUSVZFUywgQlJPV1NFUl9JTkZPX1JYLCBJRV9JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9icm93c2Vycy9pbmRleCc7XHJcbmltcG9ydCB7IENVU1RPTVNJWkVTX0RJUkVDVElWRVMgfSBmcm9tICcuL0BkaXJlY3RpdmVzL2N1c3RvbS1zaXplcy9pbmRleCc7XHJcbmltcG9ydCB7IERFVklDRVNfRElSRUNUSVZFUywgREVWSUNFU19JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9kZXZpY2VzL2luZGV4JztcclxuaW1wb3J0IHsgUElYRUxSQVRJT19ESVJFQ1RJVkVTIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9waXhlbHJhdGlvL2luZGV4JztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRV9ESVJFQ1RJVkUgfSBmcm9tICcuL0BkaXJlY3RpdmVzL3Jlc3BvbnNpdmUvaW5kZXgnO1xyXG5pbXBvcnQgeyBSRVNQT05TSVZFX1NJWkVfSU5GT19ESVJFQ1RJVkUsIFJFU1BPTlNJVkVfU0laRV9JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9yZXNwb25zaXZlLXNpemUtaW5mby9pbmRleCc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVXSU5ET1dfRElSRUNUSVZFIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9yZXNwb25zaXZlLXdpbmRvdy9pbmRleCc7XHJcbmltcG9ydCB7IFVTRVJBR0VOVF9JTkZPX0RJUkVDVElWRSwgVVNFUkFHRU5UX0lORk9fUlggfSBmcm9tICcuL0BkaXJlY3RpdmVzL3VzZXJhZ2VudC9pbmRleCc7XHJcbmltcG9ydCB7IElSZXNwb25zaXZlQ29uZmlnIH0gZnJvbSAnLi9AY29yZS9pbnRlcmZhY2VzL3Jlc3BvbnNpdmUtY29uZmlnLmludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBQbGF0Zm9ybVNlcnZpY2UgfSBmcm9tICcuL0Bjb3JlL3Byb3ZpZGVycy9wbGF0Zm9ybS1zZXJ2aWNlL3BsYXRmb3JtLnNlcnZpY2UnO1xyXG5leHBvcnQgY29uc3QgUkVTUE9OU0lWRV9DT05GSUdVUkFUSU9OID0gbmV3IEluamVjdGlvblRva2VuPElSZXNwb25zaXZlQ29uZmlnPignY29uZmlnJyk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVzcG9uc2l2ZUNvbmZpZ3VyYXRpb24oY29uZmlnOiBJUmVzcG9uc2l2ZUNvbmZpZykge1xyXG4gICAgcmV0dXJuIG5ldyBSZXNwb25zaXZlQ29uZmlnKGNvbmZpZyk7XHJcbn1cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczpcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIEJPT1RTVFJBUF9ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBCUk9XU0VSX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIENVU1RPTVNJWkVTX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIERFVklDRVNfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgUElYRUxSQVRJT19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRVdJTkRPV19ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFVTRVJBR0VOVF9JTkZPX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9TSVpFX0lORk9fRElSRUNUSVZFXHJcbiAgICAgICAgXSxcclxuICAgIGV4cG9ydHM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBCT09UU1RSQVBfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQlJPV1NFUl9ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBDVVNUT01TSVpFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBERVZJQ0VTX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFBJWEVMUkFUSU9fRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVXSU5ET1dfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBVU0VSQUdFTlRfSU5GT19ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfU0laRV9JTkZPX0RJUkVDVElWRVxyXG4gICAgICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFJlc3BvbnNpdmVNb2R1bGUge1xyXG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZzogSVJlc3BvbnNpdmVDb25maWcgPSBudWxsKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmdNb2R1bGU6IFJlc3BvbnNpdmVNb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogWyAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGU6IFJFU1BPTlNJVkVfQ09ORklHVVJBVElPTixcclxuICAgICAgICAgICAgICAgIHVzZVZhbHVlOiAoY29uZmlnICE9PSBudWxsKSA/IGNvbmZpZyA6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4czogeyBtYXg6IDc2NyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbTogeyBtaW46IDc2OCwgbWF4OiA5OTEgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWQ6IHsgbWluOiA5OTIsIG1heDogMTE5OSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZzogeyBtaW46IDEyMDAsIG1heDogMTU5OSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4bDogeyBtaW46IDE2MDAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2VUaW1lOiAxMDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyT25TZXJ2ZXI6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9IGFzIElSZXNwb25zaXZlQ29uZmlnXHJcbiAgICAgICAgICAgIH0se1xyXG4gICAgICAgICAgICAgICAgcHJvdmlkZTogUmVzcG9uc2l2ZUNvbmZpZyxcclxuICAgICAgICAgICAgICAgIHVzZUZhY3Rvcnk6IHJlc3BvbnNpdmVDb25maWd1cmF0aW9uLFxyXG4gICAgICAgICAgICAgICAgZGVwczpbUkVTUE9OU0lWRV9DT05GSUdVUkFUSU9OXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgIFBsYXRmb3JtU2VydmljZSxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9TSVpFX0lORk9fUlgsXHJcbiAgICAgICAgICAgIFVTRVJBR0VOVF9JTkZPX1JYLFxyXG4gICAgICAgICAgICBCUk9XU0VSX0lORk9fUlgsXHJcbiAgICAgICAgICAgIElFX0lORk9fUlgsXHJcbiAgICAgICAgICAgIERFVklDRVNfSU5GT19SWF1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl19