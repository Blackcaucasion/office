import { __decorate } from "tslib";
/**
 * @name custom-sizes.directives
 * @description Custom sizes directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
let ShowItSizesDirective = class ShowItSizesDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showItSizes(_grid_state) {
        this.setGrid(_grid_state, 'sizes');
    }
};
ShowItSizesDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowItSizesDirective.prototype, "showItSizes", null);
ShowItSizesDirective = __decorate([
    Directive({
        selector: '[showItSizes]'
    })
], ShowItSizesDirective);
export { ShowItSizesDirective };
let HideItSizesDirective = class HideItSizesDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideItSizes(_grid_state) {
        this.setGrid(_grid_state, 'sizes');
    }
};
HideItSizesDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideItSizesDirective.prototype, "hideItSizes", null);
HideItSizesDirective = __decorate([
    Directive({
        selector: '[hideItSizes]'
    })
], HideItSizesDirective);
export { HideItSizesDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXNpemVzLWRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL2N1c3RvbS1zaXplcy9jdXN0b20tc2l6ZXMtZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHlEQUF5RCxDQUFDO0FBQzFGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx1REFBdUQsQ0FBQztBQUN4RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFLMUYsSUFBYSxvQkFBb0IsR0FBakMsTUFBYSxvQkFBcUIsU0FBUSxlQUFvQjtJQUkxRCxZQUFhLFdBQTZCLEVBQzdCLGFBQStCLEVBQy9CLGdCQUFpQyxFQUNqQyxFQUFxQixFQUNyQixlQUFnQztRQUV6QyxLQUFLLENBQUUsV0FBVyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsZUFBZSxDQUFFLENBQUM7UUFSckUsa0JBQWEsR0FBRyxJQUFJLENBQUM7SUFTL0IsQ0FBQztJQUNTLElBQUksV0FBVyxDQUFFLFdBQWdCO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSixDQUFBOztZQVg2QixXQUFXO1lBQ1QsZ0JBQWdCO1lBQ2IsZUFBZTtZQUM3QixpQkFBaUI7WUFDSixlQUFlOztBQUluQztJQUFSLEtBQUssRUFBRTt1REFFUjtBQWRRLG9CQUFvQjtJQUpoQyxTQUFTLENBQ1Y7UUFDSSxRQUFRLEVBQUUsZUFBZTtLQUM1QixDQUFDO0dBQ1csb0JBQW9CLENBZWhDO1NBZlksb0JBQW9CO0FBcUJqQyxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFxQixTQUFRLGVBQW9CO0lBSTFELFlBQWEsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IsZ0JBQWlDLEVBQ2pDLEVBQXFCLEVBQ3JCLGVBQWdDO1FBRXpDLEtBQUssQ0FBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsRUFBRSxlQUFlLENBQUUsQ0FBQztRQVJyRSxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQVNoQyxDQUFDO0lBRVEsSUFBSSxXQUFXLENBQUUsV0FBZ0I7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBRSxXQUFXLEVBQUUsT0FBTyxDQUFFLENBQUM7SUFDekMsQ0FBQztDQUNKLENBQUE7O1lBWjZCLFdBQVc7WUFDVCxnQkFBZ0I7WUFDYixlQUFlO1lBQzdCLGlCQUFpQjtZQUNKLGVBQWU7O0FBS3BDO0lBQVIsS0FBSyxFQUFFO3VEQUVQO0FBZlEsb0JBQW9CO0lBSmhDLFNBQVMsQ0FDVjtRQUNJLFFBQVEsRUFBRSxlQUFlO0tBQzVCLENBQUM7R0FDVyxvQkFBb0IsQ0FnQmhDO1NBaEJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSBjdXN0b20tc2l6ZXMuZGlyZWN0aXZlc1xyXG4gKiBAZGVzY3JpcHRpb24gQ3VzdG9tIHNpemVzIGRpcmVjdGl2ZXMgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVfQkFTRSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLWJhc2UvcmVzcG9uc2l2ZS1iYXNlJztcclxuaW1wb3J0IHsgUGxhdGZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3BsYXRmb3JtLXNlcnZpY2UvcGxhdGZvcm0uc2VydmljZSc7XHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW3Nob3dJdFNpemVzXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3dJdFNpemVzRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciggdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXHJcbiAgICAgICAgICAgICAgICAgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICAgICAgICAgICBfcmVzcG9uc2l2ZVN0YXRlOiBSZXNwb25zaXZlU3RhdGUsXHJcbiAgICAgICAgICAgICAgICAgY2Q6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgICAgICAgICAgIHBsYXRmb3JtU2VydmljZTogUGxhdGZvcm1TZXJ2aWNlXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgc3VwZXIoIHRlbXBsYXRlUmVmLCB2aWV3Q29udGFpbmVyLCBfcmVzcG9uc2l2ZVN0YXRlLCBjZCwgcGxhdGZvcm1TZXJ2aWNlICk7XHJcbiAgICB9XHJcbiAgICAgQElucHV0KCkgc2V0IHNob3dJdFNpemVzKCBfZ3JpZF9zdGF0ZTogYW55ICkge1xyXG4gICAgICAgIHRoaXMuc2V0R3JpZChfZ3JpZF9zdGF0ZSwgJ3NpemVzJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoXHJcbntcclxuICAgIHNlbGVjdG9yOiAnW2hpZGVJdFNpemVzXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhpZGVJdFNpemVzRGlyZWN0aXZlIGV4dGVuZHMgUkVTUE9OU0lWRV9CQVNFPGFueT4ge1xyXG5cclxuICAgIHByb3RlY3RlZCBfc2hvd1doZW5UcnVlID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxyXG4gICAgICAgICAgICAgICAgIHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXHJcbiAgICAgICAgICAgICAgICAgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgIGNkOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICAgICAgICAgICBwbGF0Zm9ybVNlcnZpY2U6IFBsYXRmb3JtU2VydmljZVxyXG4gICAgICAgICkge1xyXG4gICAgICAgIHN1cGVyKCB0ZW1wbGF0ZVJlZiwgdmlld0NvbnRhaW5lciwgX3Jlc3BvbnNpdmVTdGF0ZSwgY2QsIHBsYXRmb3JtU2VydmljZSApO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpIHNldCBoaWRlSXRTaXplcyggX2dyaWRfc3RhdGU6IGFueSApIHtcclxuICAgICAgICB0aGlzLnNldEdyaWQoIF9ncmlkX3N0YXRlLCAnc2l6ZXMnICk7XHJcbiAgICB9XHJcbn1cclxuIl19