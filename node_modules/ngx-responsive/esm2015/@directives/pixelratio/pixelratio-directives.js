import { __decorate } from "tslib";
/**
 * @name pixelratio.directives
 * @description pixelratio directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, Output, EventEmitter, TemplateRef, ViewContainerRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
/*======== 1x =========*/
let Is1xPixelDirective = class Is1xPixelDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = '1x';
        this._showWhenTrue = true;
    }
    set is1xPixel(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
Is1xPixelDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], Is1xPixelDirective.prototype, "is1xPixel", null);
Is1xPixelDirective = __decorate([
    Directive({
        selector: '[is1xPixel]'
    })
], Is1xPixelDirective);
export { Is1xPixelDirective };
/*======== RETINA =========*/
let IsRetinaDirective = class IsRetinaDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'retina';
        this._showWhenTrue = true;
    }
    set isRetina(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
IsRetinaDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsRetinaDirective.prototype, "isRetina", null);
IsRetinaDirective = __decorate([
    Directive({
        selector: '[isRetina]'
    })
], IsRetinaDirective);
export { IsRetinaDirective };
/*======== 4K =========*/
let Is4kDirective = class Is4kDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = '4k';
        this._showWhenTrue = true;
    }
    set isRetina(grid_state) {
        this.setGrid(this._state, 'pixelratio');
    }
};
Is4kDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], Is4kDirective.prototype, "isRetina", null);
Is4kDirective = __decorate([
    Directive({
        selector: '[is4k]'
    })
], Is4kDirective);
export { Is4kDirective };
/*======== DeviceInfo =========*/
let PixelRatioInfoDirective = class PixelRatioInfoDirective {
    constructor(_responsiveState, viewContainer, cd, platformService) {
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._isEnabledForPlatform = null;
        this.pixelratio = new EventEmitter();
        this._isEnabledForPlatform = platformService.isEnabledForPlatform();
    }
    set pixelratioInfo(grid_state) {
        this.updateData(this.currentstate);
    }
    ngOnInit() {
        if (this._isEnabledForPlatform) {
            this._subscription = this._responsiveState.pixel$.subscribe(this.updateData.bind(this));
        }
    }
    ngOnDestroy() {
        if (this._isEnabledForPlatform) {
            this._subscription.unsubscribe();
        }
    }
    updateData(value) {
        const update = this._ifValueChanged(this.noRepeat, value);
        if (update) {
            this.pixelratio.emit(value);
            this.cd.markForCheck();
        }
    }
    _ifValueChanged(oldValue, newValue) {
        if (oldValue === newValue) {
            return false;
        }
        else {
            this.noRepeat = newValue;
            return true;
        }
    }
};
PixelRatioInfoDirective.ctorParameters = () => [
    { type: ResponsiveState },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], PixelRatioInfoDirective.prototype, "pixelratioInfo", null);
__decorate([
    Output()
], PixelRatioInfoDirective.prototype, "pixelratio", void 0);
PixelRatioInfoDirective = __decorate([
    Directive({ selector: 'pixel-ratio-info' })
], PixelRatioInfoDirective);
export { PixelRatioInfoDirective };
//# sourceMappingURL=data:application/json;base64,