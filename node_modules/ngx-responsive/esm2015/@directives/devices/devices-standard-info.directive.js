import { __decorate, __param } from "tslib";
/**
 * @name devices-standard-info.directive
 * @description devices-standard-info directive in ngx-responsive
 *
 * @license MIT
 */
import { EventEmitter, Directive, Input, Output, ViewContainerRef, OnInit, OnDestroy, ChangeDetectorRef } from '@angular/core';
import { PLATFORM_ID, Inject } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { DeviceStandardInfo } from './devices-standard-info';
let DeviceStandardInfoDirective = class DeviceStandardInfoDirective extends DeviceStandardInfo {
    constructor(_responsiveState, viewContainer, cd, _platformId) {
        super(_responsiveState, _platformId);
        this._responsiveState = _responsiveState;
        this.viewContainer = viewContainer;
        this.cd = cd;
        this._platformId = _platformId;
        this.standard = new EventEmitter();
    }
    set deviceStandardInfo(grid_state) {
        this._updateData(this.currentstate);
    }
    ngOnInit() {
        this.connect();
    }
    ngOnDestroy() {
        this.disconnect();
    }
    _updateData(value) {
        this.standard.emit(value);
        this.cd.markForCheck();
    }
};
DeviceStandardInfoDirective.ctorParameters = () => [
    { type: ResponsiveState },
    { type: ViewContainerRef },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input()
], DeviceStandardInfoDirective.prototype, "deviceStandardInfo", null);
__decorate([
    Output()
], DeviceStandardInfoDirective.prototype, "standard", void 0);
DeviceStandardInfoDirective = __decorate([
    Directive({ selector: 'device-standard-info' }),
    __param(3, Inject(PLATFORM_ID))
], DeviceStandardInfoDirective);
export { DeviceStandardInfoDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlcy1zdGFuZGFyZC1pbmZvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1yZXNwb25zaXZlLyIsInNvdXJjZXMiOlsiQGRpcmVjdGl2ZXMvZGV2aWNlcy9kZXZpY2VzLXN0YW5kYXJkLWluZm8uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTs7Ozs7R0FLRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvSCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seURBQXlELENBQUM7QUFDMUYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFHN0QsSUFBYSwyQkFBMkIsR0FBeEMsTUFBYSwyQkFBNEIsU0FBUSxrQkFBa0I7SUFLL0QsWUFBdUIsZ0JBQWlDLEVBQzFDLGFBQStCLEVBQy9CLEVBQXFCLEVBQ0EsV0FBVztRQUMxQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFKbEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFpQjtRQUMxQyxrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDQSxnQkFBVyxHQUFYLFdBQVcsQ0FBQTtRQUo3QixhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFLeEIsQ0FBQztJQVJsQyxJQUFJLGtCQUFrQixDQUFFLFVBQTZCO1FBQzFELElBQUksQ0FBQyxXQUFXLENBQUUsSUFBSSxDQUFDLFlBQVksQ0FBRSxDQUFDO0lBQzFDLENBQUM7SUFPRCxRQUFRO1FBQ0wsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFDUyxXQUFXLENBQUUsS0FBVTtRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7Q0FDSixDQUFBOztZQWY0QyxlQUFlO1lBQzNCLGdCQUFnQjtZQUMzQixpQkFBaUI7NENBQzlCLE1BQU0sU0FBQyxXQUFXOztBQVBkO0lBQVIsS0FBSyxFQUFFO3FFQUVQO0FBQ1M7SUFBVCxNQUFNLEVBQUU7NkRBQXlEO0FBSnpELDJCQUEyQjtJQUR2QyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQztJQVN2QyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtHQVJmLDJCQUEyQixDQW9CdkM7U0FwQlksMkJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBuYW1lIGRldmljZXMtc3RhbmRhcmQtaW5mby5kaXJlY3RpdmVcclxuICogQGRlc2NyaXB0aW9uIGRldmljZXMtc3RhbmRhcmQtaW5mbyBkaXJlY3RpdmUgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGxpY2Vuc2UgTUlUXHJcbiAqL1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgVmlld0NvbnRhaW5lclJlZiwgT25Jbml0LCBPbkRlc3Ryb3ksIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4uLy4uL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLXN0YXRlL3Jlc3BvbnNpdmUtc3RhdGUnO1xyXG5pbXBvcnQgeyBEZXZpY2VTdGFuZGFyZEluZm8gfSBmcm9tICcuL2RldmljZXMtc3RhbmRhcmQtaW5mbyc7XHJcblxyXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdkZXZpY2Utc3RhbmRhcmQtaW5mbycgfSlcclxuZXhwb3J0IGNsYXNzIERldmljZVN0YW5kYXJkSW5mb0RpcmVjdGl2ZSBleHRlbmRzIERldmljZVN0YW5kYXJkSW5mbyBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBJbnB1dCgpIHNldCBkZXZpY2VTdGFuZGFyZEluZm8oIGdyaWRfc3RhdGU6IHN0cmluZ1tdIHwgc3RyaW5nICkge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZURhdGEoIHRoaXMuY3VycmVudHN0YXRlICk7XHJcbiAgICB9XHJcbiAgICBAT3V0cHV0KCkgcHVibGljIHN0YW5kYXJkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIGNvbnN0cnVjdG9yKCBwcm90ZWN0ZWQgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIHByb3RlY3RlZCB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgICAgICAgQEluamVjdChQTEFURk9STV9JRCkgcHJvdGVjdGVkIF9wbGF0Zm9ybUlkXHJcbiAgICApIHsgc3VwZXIoX3Jlc3BvbnNpdmVTdGF0ZSwgX3BsYXRmb3JtSWQpOyB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgIHRoaXMuY29ubmVjdCgpO1xyXG4gICAgfVxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbiAgICBwcm90ZWN0ZWQgX3VwZGF0ZURhdGEoIHZhbHVlOiBhbnkgKSB7XHJcbiAgICAgICAgdGhpcy5zdGFuZGFyZC5lbWl0KCB2YWx1ZSApO1xyXG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XHJcbiAgICB9XHJcbn1cclxuIl19