import { __decorate } from "tslib";
/**
 * @name devices.directives
 * @description Devices directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
let IsSmartTvDirective = class IsSmartTvDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'smarttv';
        this._showWhenTrue = true;
    }
    set isSmartTv(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
IsSmartTvDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsSmartTvDirective.prototype, "isSmartTv", null);
IsSmartTvDirective = __decorate([
    Directive({
        selector: '[isSmartTv]'
    })
], IsSmartTvDirective);
export { IsSmartTvDirective };
let IsDesktopDirective = class IsDesktopDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'desktop';
        this._showWhenTrue = true;
    }
    set isDesktop(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
IsDesktopDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsDesktopDirective.prototype, "isDesktop", null);
IsDesktopDirective = __decorate([
    Directive({
        selector: '[isDesktop]'
    })
], IsDesktopDirective);
export { IsDesktopDirective };
let IsTabletDirective = class IsTabletDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'tablet';
        this._showWhenTrue = true;
    }
    set isTablet(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
IsTabletDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsTabletDirective.prototype, "isTablet", null);
IsTabletDirective = __decorate([
    Directive({
        selector: '[isTablet]'
    })
], IsTabletDirective);
export { IsTabletDirective };
let IsMobileDirective = class IsMobileDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'mobile';
        this._showWhenTrue = true;
    }
    set isMobile(grid_state) {
        this.setGrid(this._state, 'device');
    }
};
IsMobileDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsMobileDirective.prototype, "isMobile", null);
IsMobileDirective = __decorate([
    Directive({
        selector: '[isMobile]'
    })
], IsMobileDirective);
export { IsMobileDirective };
let ShowItDeviceDirective = class ShowItDeviceDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showItDevice(grid_state) {
        this.setGrid(grid_state, 'device');
    }
};
ShowItDeviceDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowItDeviceDirective.prototype, "showItDevice", null);
ShowItDeviceDirective = __decorate([
    Directive({
        selector: '[showItDevice]'
    })
], ShowItDeviceDirective);
export { ShowItDeviceDirective };
let HideItDeviceDirective = class HideItDeviceDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideItDevice(grid_state) {
        this.setGrid(grid_state, 'device');
    }
};
HideItDeviceDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideItDeviceDirective.prototype, "hideItDevice", null);
HideItDeviceDirective = __decorate([
    Directive({
        selector: '[hideItDevice]'
    })
], HideItDeviceDirective);
export { HideItDeviceDirective };
let IsIphoneDirective = class IsIphoneDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'iphone';
        this._showWhenTrue = true;
    }
    set isIphone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
IsIphoneDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIphoneDirective.prototype, "isIphone", null);
IsIphoneDirective = __decorate([
    Directive({
        selector: '[isIphone]'
    })
], IsIphoneDirective);
export { IsIphoneDirective };
let IsIpadDirective = class IsIpadDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'iphone';
        this._showWhenTrue = true;
    }
    set isIphone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
IsIpadDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIpadDirective.prototype, "isIphone", null);
IsIpadDirective = __decorate([
    Directive({
        selector: '[isIpad]'
    })
], IsIpadDirective);
export { IsIpadDirective };
let IsAndroidMobileDirective = class IsAndroidMobileDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'android mobile';
        this._showWhenTrue = true;
    }
    set isAndroidMobile(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
IsAndroidMobileDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsAndroidMobileDirective.prototype, "isAndroidMobile", null);
IsAndroidMobileDirective = __decorate([
    Directive({
        selector: '[isAndroidMobile]'
    })
], IsAndroidMobileDirective);
export { IsAndroidMobileDirective };
let IsAndroidTabletDirective = class IsAndroidTabletDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'android tablet';
        this._showWhenTrue = true;
    }
    set isAndroidTablet(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
IsAndroidTabletDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsAndroidTabletDirective.prototype, "isAndroidTablet", null);
IsAndroidTabletDirective = __decorate([
    Directive({
        selector: '[isAndroidTablet]'
    })
], IsAndroidTabletDirective);
export { IsAndroidTabletDirective };
let IsWindowsPhoneDirective = class IsWindowsPhoneDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'windows phone';
        this._showWhenTrue = true;
    }
    set isWindowsPhone(grid_state) {
        this.setGrid(this._state, 'standard');
    }
};
IsWindowsPhoneDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsWindowsPhoneDirective.prototype, "isWindowsPhone", null);
IsWindowsPhoneDirective = __decorate([
    Directive({
        selector: '[isWindowsPhone]'
    })
], IsWindowsPhoneDirective);
export { IsWindowsPhoneDirective };
let ShowItStandardDirective = class ShowItStandardDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showItStandard(grid_state) {
        this.setGrid(grid_state, 'standard');
    }
};
ShowItStandardDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowItStandardDirective.prototype, "showItStandard", null);
ShowItStandardDirective = __decorate([
    Directive({
        selector: '[showItStandard]'
    })
], ShowItStandardDirective);
export { ShowItStandardDirective };
let HideItStandardDirective = class HideItStandardDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideItStandard(grid_state) {
        this.setGrid(grid_state, 'standard');
    }
};
HideItStandardDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideItStandardDirective.prototype, "hideItStandard", null);
HideItStandardDirective = __decorate([
    Directive({
        selector: '[hideItStandard]'
    })
], HideItStandardDirective);
export { HideItStandardDirective };
let IsPortraitDirective = class IsPortraitDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'portrait';
        this._showWhenTrue = false;
    }
    set isPortrait(grid_state) {
        this.setGrid(this._state, 'orientation');
    }
};
IsPortraitDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsPortraitDirective.prototype, "isPortrait", null);
IsPortraitDirective = __decorate([
    Directive({
        selector: '[isPortrait]'
    })
], IsPortraitDirective);
export { IsPortraitDirective };
let IsLandscapeDirective = class IsLandscapeDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'landscape';
        this._showWhenTrue = false;
    }
    set isLandscape(grid_state) {
        this.setGrid(this._state, 'orientation');
    }
};
IsLandscapeDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsLandscapeDirective.prototype, "isLandscape", null);
IsLandscapeDirective = __decorate([
    Directive({
        selector: '[isLandscape]'
    })
], IsLandscapeDirective);
export { IsLandscapeDirective };
//# sourceMappingURL=data:application/json;base64,