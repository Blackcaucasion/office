import { __decorate } from "tslib";
/**
 * @name browser-directives
 * @description Browser directives in ngx-responsive
 *
 * @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
let IsChromeDirective = class IsChromeDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'chrome';
        this._showWhenTrue = true;
    }
    set isChrome(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
IsChromeDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsChromeDirective.prototype, "isChrome", null);
IsChromeDirective = __decorate([
    Directive({
        selector: '[isChrome]'
    })
], IsChromeDirective);
export { IsChromeDirective };
let IsFirefoxDirective = class IsFirefoxDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'firefox';
        this._showWhenTrue = true;
    }
    set isFirefox(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
IsFirefoxDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsFirefoxDirective.prototype, "isFirefox", null);
IsFirefoxDirective = __decorate([
    Directive({
        selector: '[isFirefox]'
    })
], IsFirefoxDirective);
export { IsFirefoxDirective };
let IsSafariDirective = class IsSafariDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'safari';
        this._showWhenTrue = true;
    }
    set isSafari(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
IsSafariDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsSafariDirective.prototype, "isSafari", null);
IsSafariDirective = __decorate([
    Directive({
        selector: '[isSafari]'
    })
], IsSafariDirective);
export { IsSafariDirective };
let IsOperaDirective = class IsOperaDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'opera';
        this._showWhenTrue = true;
    }
    set isOpera(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
IsOperaDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsOperaDirective.prototype, "isOpera", null);
IsOperaDirective = __decorate([
    Directive({
        selector: '[isOpera]'
    })
], IsOperaDirective);
export { IsOperaDirective };
let IsIEDirective = class IsIEDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'ie';
        this._showWhenTrue = true;
    }
    set isIE(grid_state) {
        this.setGrid(this._state, 'browser');
    }
};
IsIEDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIEDirective.prototype, "isIE", null);
IsIEDirective = __decorate([
    Directive({
        selector: '[isIE]'
    })
], IsIEDirective);
export { IsIEDirective };
let ShowItBrowserDirective = class ShowItBrowserDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showItBrowser(grid_state) {
        this.setGrid(grid_state, 'browser');
    }
};
ShowItBrowserDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowItBrowserDirective.prototype, "showItBrowser", null);
ShowItBrowserDirective = __decorate([
    Directive({
        selector: '[showItBrowser]'
    })
], ShowItBrowserDirective);
export { ShowItBrowserDirective };
let HideItBrowserDirective = class HideItBrowserDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideItBrowser(grid_state) {
        this.setGrid(grid_state, 'browser');
    }
};
HideItBrowserDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideItBrowserDirective.prototype, "hideItBrowser", null);
HideItBrowserDirective = __decorate([
    Directive({
        selector: '[hideItBrowser]'
    })
], HideItBrowserDirective);
export { HideItBrowserDirective };
let IsIE9Directive = class IsIE9Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'ie 9';
        this._showWhenTrue = true;
    }
    set isIE9(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
IsIE9Directive.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIE9Directive.prototype, "isIE9", null);
IsIE9Directive = __decorate([
    Directive({
        selector: '[isIE9]'
    })
], IsIE9Directive);
export { IsIE9Directive };
let IsIE10Directive = class IsIE10Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'ie 10';
        this._showWhenTrue = true;
    }
    set isIE10(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
IsIE10Directive.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIE10Directive.prototype, "isIE10", null);
IsIE10Directive = __decorate([
    Directive({
        selector: '[isIE10]'
    })
], IsIE10Directive);
export { IsIE10Directive };
let IsIE11Directive = class IsIE11Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'ie 11';
        this._showWhenTrue = true;
    }
    set isIE11(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
IsIE11Directive.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIE11Directive.prototype, "isIE11", null);
IsIE11Directive = __decorate([
    Directive({
        selector: '[isIE11]'
    })
], IsIE11Directive);
export { IsIE11Directive };
let IsIE12Directive = class IsIE12Directive extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'ie 12';
        this._showWhenTrue = true;
    }
    set isIE12(grid_state) {
        this.setGrid(this._state, 'ie');
    }
};
IsIE12Directive.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], IsIE12Directive.prototype, "isIE12", null);
IsIE12Directive = __decorate([
    Directive({
        selector: '[isIE12]'
    })
], IsIE12Directive);
export { IsIE12Directive };
let ShowIEVersionDirective = class ShowIEVersionDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showIEVersion(grid_state) {
        this.setGrid(grid_state, 'ie');
    }
};
ShowIEVersionDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowIEVersionDirective.prototype, "showIEVersion", null);
ShowIEVersionDirective = __decorate([
    Directive({
        selector: '[showIEVersion]'
    })
], ShowIEVersionDirective);
export { ShowIEVersionDirective };
let HideIEVersionDirective = class HideIEVersionDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideIEVersion(grid_state) {
        this.setGrid(grid_state, 'ie');
    }
};
HideIEVersionDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideIEVersionDirective.prototype, "hideIEVersion", null);
HideIEVersionDirective = __decorate([
    Directive({
        selector: '[hideIEVersion]'
    })
], HideIEVersionDirective);
export { HideIEVersionDirective };
//# sourceMappingURL=data:application/json;base64,