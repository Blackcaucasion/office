import { __decorate } from "tslib";
/**
 *  @name bootstrap.directives
 *  @description bootstrap directives
 *  @license MIT
 */
import { Directive, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
let XlDirective = class XlDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'xl';
        this._showWhenTrue = true;
        this.setGrid(this._state, 'bootstrap');
    }
};
XlDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
XlDirective = __decorate([
    Directive({
        selector: '[xl]'
    })
], XlDirective);
export { XlDirective };
let LgDirective = class LgDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'lg';
        this._showWhenTrue = true;
        this.setGrid(this._state, 'bootstrap');
    }
};
LgDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
LgDirective = __decorate([
    Directive({
        selector: '[lg]'
    })
], LgDirective);
export { LgDirective };
let MdDirective = class MdDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'md';
        this._showWhenTrue = true;
        this.setGrid(this._state, 'bootstrap');
    }
};
MdDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
MdDirective = __decorate([
    Directive({
        selector: '[md]'
    })
], MdDirective);
export { MdDirective };
let SmDirective = class SmDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'sm';
        this._showWhenTrue = true;
        this.setGrid(this._state, 'bootstrap');
    }
};
SmDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
SmDirective = __decorate([
    Directive({
        selector: '[sm]'
    })
], SmDirective);
export { SmDirective };
let XsDirective = class XsDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._state = 'xs';
        this._showWhenTrue = true;
        this.setGrid(this._state, 'bootstrap');
    }
};
XsDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
XsDirective = __decorate([
    Directive({
        selector: '[xs]'
    })
], XsDirective);
export { XsDirective };
let ShowItBootstrapDirective = class ShowItBootstrapDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = true;
    }
    set showItBootstrap(grid_state) {
        this.setGrid(grid_state, 'bootstrap');
    }
};
ShowItBootstrapDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], ShowItBootstrapDirective.prototype, "showItBootstrap", null);
ShowItBootstrapDirective = __decorate([
    Directive({
        selector: '[showItBootstrap]'
    })
], ShowItBootstrapDirective);
export { ShowItBootstrapDirective };
let HideItBootstrapDirective = class HideItBootstrapDirective extends RESPONSIVE_BASE {
    constructor(templateRef, viewContainer, _responsiveState, cd, platformService) {
        super(templateRef, viewContainer, _responsiveState, cd, platformService);
        this._showWhenTrue = false;
    }
    set hideItBootstrap(grid_state) {
        this.setGrid(grid_state, 'bootstrap');
    }
};
HideItBootstrapDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: ResponsiveState },
    { type: ChangeDetectorRef },
    { type: PlatformService }
];
__decorate([
    Input()
], HideItBootstrapDirective.prototype, "hideItBootstrap", null);
HideItBootstrapDirective = __decorate([
    Directive({
        selector: '[hideItBootstrap]'
    })
], HideItBootstrapDirective);
export { HideItBootstrapDirective };
//# sourceMappingURL=data:application/json;base64,