import { __decorate, __param } from "tslib";
/**
 * @name useragent-info
 * @description User agent info abstract class in ngx-responsive
 *
 * @license MIT
 */
import { PLATFORM_ID, Inject } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { distinctUntilChanged } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
let UserAgentInfo = class UserAgentInfo {
    constructor(_responsiveState, _platformId) {
        this._responsiveState = _responsiveState;
        this._platformId = _platformId;
        this.replaySubject$ = new ReplaySubject();
        this._isBrowser = null;
        this._isBrowser = isPlatformBrowser(this._platformId);
    }
    connect() {
        if (this._isBrowser) {
            this._subscription = this._responsiveState.userAgent$.pipe(distinctUntilChanged())
                .subscribe((data) => {
                this._emitUserAgent(data);
            });
        }
        return this.replaySubject$.asObservable();
    }
    disconnect() {
        if (this._isBrowser) {
            this._subscription.unsubscribe();
        }
    }
    get getUserAgent() {
        return this.replaySubject$.asObservable();
    }
    _emitUserAgent(value) {
        this.replaySubject$.next(value);
    }
};
UserAgentInfo = __decorate([
    __param(1, Inject(PLATFORM_ID))
], UserAgentInfo);
export { UserAgentInfo };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcmFnZW50LWluZm8uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbIkBkaXJlY3RpdmVzL3VzZXJhZ2VudC91c2VyYWdlbnQtaW5mby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7O0dBS0c7QUFDSCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUV0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBS3JDLElBQXNCLGFBQWEsR0FBbkMsTUFBc0IsYUFBYTtJQUkvQixZQUFtQixnQkFBaUMsRUFDakIsV0FBVztRQUQzQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWlCO1FBQ2pCLGdCQUFXLEdBQVgsV0FBVyxDQUFBO1FBSnZDLG1CQUFjLEdBQXVCLElBQUksYUFBYSxFQUFFLENBQUM7UUFDeEQsZUFBVSxHQUFZLElBQUksQ0FBQztRQUsvQixJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ00sT0FBTztRQUNWLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7aUJBQzdFLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO2dCQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1NBQ047UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUNNLFVBQVU7UUFDYixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQztJQUNMLENBQUM7SUFDRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUNTLGNBQWMsQ0FBQyxLQUFVO1FBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BDLENBQUM7Q0FDSixDQUFBO0FBN0JxQixhQUFhO0lBSzFCLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBTE4sYUFBYSxDQTZCbEM7U0E3QnFCLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQG5hbWUgdXNlcmFnZW50LWluZm9cclxuICogQGRlc2NyaXB0aW9uIFVzZXIgYWdlbnQgaW5mbyBhYnN0cmFjdCBjbGFzcyBpbiBuZ3gtcmVzcG9uc2l2ZVxyXG4gKlxyXG4gKiBAbGljZW5zZSBNSVRcclxuICovXHJcbmltcG9ydCB7IFBMQVRGT1JNX0lELCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgUmVzcG9uc2l2ZVN0YXRlIH0gZnJvbSAnLi4vLi4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVXNlckFnZW50SW5mbyB7XHJcbiAgICBwdWJsaWMgcmVwbGF5U3ViamVjdCQ6IFJlcGxheVN1YmplY3Q8YW55PiA9IG5ldyBSZXBsYXlTdWJqZWN0KCk7XHJcbiAgICBwcml2YXRlIF9pc0Jyb3dzZXI6IGJvb2xlYW4gPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBfc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgX3Jlc3BvbnNpdmVTdGF0ZTogUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBfcGxhdGZvcm1JZFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy5faXNCcm93c2VyID0gaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5fcGxhdGZvcm1JZCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgY29ubmVjdCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gdGhpcy5fcmVzcG9uc2l2ZVN0YXRlLnVzZXJBZ2VudCQucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKVxyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VtaXRVc2VyQWdlbnQoZGF0YSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYXlTdWJqZWN0JC5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuICAgIHB1YmxpYyBkaXNjb25uZWN0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0Jyb3dzZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IGdldFVzZXJBZ2VudCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcGxheVN1YmplY3QkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG4gICAgcHJvdGVjdGVkIF9lbWl0VXNlckFnZW50KHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnJlcGxheVN1YmplY3QkLm5leHQodmFsdWUpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==