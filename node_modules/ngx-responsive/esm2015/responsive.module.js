/**
 * @name responsive.module
 * @description Core module in ngx-responsive
 *
 * @author Manu Cutillas
 * @license MIT
 */
var ResponsiveModule_1;
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { ResponsiveState } from './@core/providers/responsive-state/responsive-state';
import { ResponsiveConfig } from './@core/providers/responsive-config/responsive-config';
import { InjectionToken } from '@angular/core';
import { BOOTSTRAP_DIRECTIVES } from './@directives/bootstrap/index';
import { BROWSER_DIRECTIVES, BROWSER_INFO_RX, IE_INFO_RX } from './@directives/browsers/index';
import { CUSTOMSIZES_DIRECTIVES } from './@directives/custom-sizes/index';
import { DEVICES_DIRECTIVES, DEVICES_INFO_RX } from './@directives/devices/index';
import { PIXELRATIO_DIRECTIVES } from './@directives/pixelratio/index';
import { RESPONSIVE_DIRECTIVE } from './@directives/responsive/index';
import { RESPONSIVE_SIZE_INFO_DIRECTIVE, RESPONSIVE_SIZE_INFO_RX } from './@directives/responsive-size-info/index';
import { RESPONSIVEWINDOW_DIRECTIVE } from './@directives/responsive-window/index';
import { USERAGENT_INFO_DIRECTIVE, USERAGENT_INFO_RX } from './@directives/useragent/index';
import { PlatformService } from './@core/providers/platform-service/platform.service';
export const RESPONSIVE_CONFIGURATION = new InjectionToken('config');
export function responsiveConfiguration(config) {
    return new ResponsiveConfig(config);
}
let ResponsiveModule = ResponsiveModule_1 = class ResponsiveModule {
    static forRoot(config = null) {
        return {
            ngModule: ResponsiveModule_1,
            providers: [{
                    provide: RESPONSIVE_CONFIGURATION,
                    useValue: (config !== null) ? config : {
                        breakPoints: {
                            xs: { max: 767 },
                            sm: { min: 768, max: 991 },
                            md: { min: 992, max: 1199 },
                            lg: { min: 1200, max: 1599 },
                            xl: { min: 1600 }
                        },
                        debounceTime: 100,
                        renderOnServer: false
                    }
                }, {
                    provide: ResponsiveConfig,
                    useFactory: responsiveConfiguration,
                    deps: [RESPONSIVE_CONFIGURATION]
                },
                ResponsiveState,
                PlatformService,
                RESPONSIVE_SIZE_INFO_RX,
                USERAGENT_INFO_RX,
                BROWSER_INFO_RX,
                IE_INFO_RX,
                DEVICES_INFO_RX]
        };
    }
};
ResponsiveModule = ResponsiveModule_1 = __decorate([
    NgModule({
        declarations: [
            BOOTSTRAP_DIRECTIVES,
            BROWSER_DIRECTIVES,
            CUSTOMSIZES_DIRECTIVES,
            DEVICES_DIRECTIVES,
            PIXELRATIO_DIRECTIVES,
            RESPONSIVE_DIRECTIVE,
            RESPONSIVEWINDOW_DIRECTIVE,
            USERAGENT_INFO_DIRECTIVE,
            RESPONSIVE_SIZE_INFO_DIRECTIVE
        ],
        exports: [
            BOOTSTRAP_DIRECTIVES,
            BROWSER_DIRECTIVES,
            CUSTOMSIZES_DIRECTIVES,
            DEVICES_DIRECTIVES,
            PIXELRATIO_DIRECTIVES,
            RESPONSIVE_DIRECTIVE,
            RESPONSIVEWINDOW_DIRECTIVE,
            USERAGENT_INFO_DIRECTIVE,
            RESPONSIVE_SIZE_INFO_DIRECTIVE
        ]
    })
], ResponsiveModule);
export { ResponsiveModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzcG9uc2l2ZS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcmVzcG9uc2l2ZS8iLCJzb3VyY2VzIjpbInJlc3BvbnNpdmUubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRzs7O0FBRUgsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVEQUF1RCxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMvRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDbEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDbkgsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDbkYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLGlCQUFpQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFNUYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ3RGLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLElBQUksY0FBYyxDQUFvQixRQUFRLENBQUMsQ0FBQztBQUV4RixNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBeUI7SUFDN0QsT0FBTyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUEyQkQsSUFBYSxnQkFBZ0Isd0JBQTdCLE1BQWEsZ0JBQWdCO0lBQ2xCLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBNEIsSUFBSTtRQUNsRCxPQUFPO1lBQ0gsUUFBUSxFQUFFLGtCQUFnQjtZQUMxQixTQUFTLEVBQUUsQ0FBYTtvQkFDcEIsT0FBTyxFQUFFLHdCQUF3QjtvQkFDakMsUUFBUSxFQUFFLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUNuQyxXQUFXLEVBQUU7NEJBQ1QsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTs0QkFDaEIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFOzRCQUMxQixFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUU7NEJBQzNCLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTs0QkFDNUIsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRTt5QkFDcEI7d0JBQ0QsWUFBWSxFQUFFLEdBQUc7d0JBQ2pCLGNBQWMsRUFBRSxLQUFLO3FCQUNIO2lCQUN6QixFQUFDO29CQUNFLE9BQU8sRUFBRSxnQkFBZ0I7b0JBQ3pCLFVBQVUsRUFBRSx1QkFBdUI7b0JBQ25DLElBQUksRUFBQyxDQUFDLHdCQUF3QixDQUFDO2lCQUNsQztnQkFDRCxlQUFlO2dCQUNmLGVBQWU7Z0JBQ2YsdUJBQXVCO2dCQUN2QixpQkFBaUI7Z0JBQ2pCLGVBQWU7Z0JBQ2YsVUFBVTtnQkFDVixlQUFlLENBQUM7U0FDbkIsQ0FBQztJQUNOLENBQUM7Q0FDSixDQUFBO0FBL0JZLGdCQUFnQjtJQTFCNUIsUUFBUSxDQUFDO1FBQ04sWUFBWSxFQUNSO1lBQ0ksb0JBQW9CO1lBQ3BCLGtCQUFrQjtZQUNsQixzQkFBc0I7WUFDdEIsa0JBQWtCO1lBQ2xCLHFCQUFxQjtZQUNyQixvQkFBb0I7WUFDcEIsMEJBQTBCO1lBQzFCLHdCQUF3QjtZQUN4Qiw4QkFBOEI7U0FDakM7UUFDTCxPQUFPLEVBQ0g7WUFDSSxvQkFBb0I7WUFDcEIsa0JBQWtCO1lBQ2xCLHNCQUFzQjtZQUN0QixrQkFBa0I7WUFDbEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQiwwQkFBMEI7WUFDMUIsd0JBQXdCO1lBQ3hCLDhCQUE4QjtTQUNqQztLQUNSLENBQUM7R0FDVyxnQkFBZ0IsQ0ErQjVCO1NBL0JZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbmFtZSByZXNwb25zaXZlLm1vZHVsZVxyXG4gKiBAZGVzY3JpcHRpb24gQ29yZSBtb2R1bGUgaW4gbmd4LXJlc3BvbnNpdmVcclxuICpcclxuICogQGF1dGhvciBNYW51IEN1dGlsbGFzXHJcbiAqIEBsaWNlbnNlIE1JVFxyXG4gKi9cclxuXHJcbmltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFJlc3BvbnNpdmVTdGF0ZSB9IGZyb20gJy4vQGNvcmUvcHJvdmlkZXJzL3Jlc3BvbnNpdmUtc3RhdGUvcmVzcG9uc2l2ZS1zdGF0ZSc7XHJcbmltcG9ydCB7IFJlc3BvbnNpdmVDb25maWcgfSBmcm9tICcuL0Bjb3JlL3Byb3ZpZGVycy9yZXNwb25zaXZlLWNvbmZpZy9yZXNwb25zaXZlLWNvbmZpZyc7XHJcbmltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJPT1RTVFJBUF9ESVJFQ1RJVkVTIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9ib290c3RyYXAvaW5kZXgnO1xyXG5pbXBvcnQgeyBCUk9XU0VSX0RJUkVDVElWRVMsIEJST1dTRVJfSU5GT19SWCwgSUVfSU5GT19SWCB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvYnJvd3NlcnMvaW5kZXgnO1xyXG5pbXBvcnQgeyBDVVNUT01TSVpFU19ESVJFQ1RJVkVTIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9jdXN0b20tc2l6ZXMvaW5kZXgnO1xyXG5pbXBvcnQgeyBERVZJQ0VTX0RJUkVDVElWRVMsIERFVklDRVNfSU5GT19SWCB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvZGV2aWNlcy9pbmRleCc7XHJcbmltcG9ydCB7IFBJWEVMUkFUSU9fRElSRUNUSVZFUyB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvcGl4ZWxyYXRpby9pbmRleCc7XHJcbmltcG9ydCB7IFJFU1BPTlNJVkVfRElSRUNUSVZFIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy9yZXNwb25zaXZlL2luZGV4JztcclxuaW1wb3J0IHsgUkVTUE9OU0lWRV9TSVpFX0lORk9fRElSRUNUSVZFLCBSRVNQT05TSVZFX1NJWkVfSU5GT19SWCB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvcmVzcG9uc2l2ZS1zaXplLWluZm8vaW5kZXgnO1xyXG5pbXBvcnQgeyBSRVNQT05TSVZFV0lORE9XX0RJUkVDVElWRSB9IGZyb20gJy4vQGRpcmVjdGl2ZXMvcmVzcG9uc2l2ZS13aW5kb3cvaW5kZXgnO1xyXG5pbXBvcnQgeyBVU0VSQUdFTlRfSU5GT19ESVJFQ1RJVkUsIFVTRVJBR0VOVF9JTkZPX1JYIH0gZnJvbSAnLi9AZGlyZWN0aXZlcy91c2VyYWdlbnQvaW5kZXgnO1xyXG5pbXBvcnQgeyBJUmVzcG9uc2l2ZUNvbmZpZyB9IGZyb20gJy4vQGNvcmUvaW50ZXJmYWNlcy9yZXNwb25zaXZlLWNvbmZpZy5pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgUGxhdGZvcm1TZXJ2aWNlIH0gZnJvbSAnLi9AY29yZS9wcm92aWRlcnMvcGxhdGZvcm0tc2VydmljZS9wbGF0Zm9ybS5zZXJ2aWNlJztcclxuZXhwb3J0IGNvbnN0IFJFU1BPTlNJVkVfQ09ORklHVVJBVElPTiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxJUmVzcG9uc2l2ZUNvbmZpZz4oJ2NvbmZpZycpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc3BvbnNpdmVDb25maWd1cmF0aW9uKGNvbmZpZzogSVJlc3BvbnNpdmVDb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2l2ZUNvbmZpZyhjb25maWcpO1xyXG59XHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgICBCT09UU1RSQVBfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQlJPV1NFUl9ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBDVVNUT01TSVpFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBERVZJQ0VTX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFBJWEVMUkFUSU9fRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgUkVTUE9OU0lWRV9ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVXSU5ET1dfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBVU0VSQUdFTlRfSU5GT19ESVJFQ1RJVkUsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfU0laRV9JTkZPX0RJUkVDVElWRVxyXG4gICAgICAgIF0sXHJcbiAgICBleHBvcnRzOlxyXG4gICAgICAgIFtcclxuICAgICAgICAgICAgQk9PVFNUUkFQX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIEJST1dTRVJfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgQ1VTVE9NU0laRVNfRElSRUNUSVZFUyxcclxuICAgICAgICAgICAgREVWSUNFU19ESVJFQ1RJVkVTLFxyXG4gICAgICAgICAgICBQSVhFTFJBVElPX0RJUkVDVElWRVMsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFV0lORE9XX0RJUkVDVElWRSxcclxuICAgICAgICAgICAgVVNFUkFHRU5UX0lORk9fRElSRUNUSVZFLFxyXG4gICAgICAgICAgICBSRVNQT05TSVZFX1NJWkVfSU5GT19ESVJFQ1RJVkVcclxuICAgICAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zaXZlTW9kdWxlIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChjb25maWc6IElSZXNwb25zaXZlQ29uZmlnID0gbnVsbCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBSZXNwb25zaXZlTW9kdWxlLFxyXG4gICAgICAgICAgICBwcm92aWRlcnM6IFsgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlOiBSRVNQT05TSVZFX0NPTkZJR1VSQVRJT04sXHJcbiAgICAgICAgICAgICAgICB1c2VWYWx1ZTogKGNvbmZpZyAhPT0gbnVsbCkgPyBjb25maWcgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeHM6IHsgbWF4OiA3NjcgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc206IHsgbWluOiA3NjgsIG1heDogOTkxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1kOiB7IG1pbjogOTkyLCBtYXg6IDExOTkgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGc6IHsgbWluOiAxMjAwLCBtYXg6IDE1OTkgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGw6IHsgbWluOiAxNjAwIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlYm91bmNlVGltZTogMTAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlck9uU2VydmVyOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSBhcyBJUmVzcG9uc2l2ZUNvbmZpZ1xyXG4gICAgICAgICAgICB9LHtcclxuICAgICAgICAgICAgICAgIHByb3ZpZGU6IFJlc3BvbnNpdmVDb25maWcsXHJcbiAgICAgICAgICAgICAgICB1c2VGYWN0b3J5OiByZXNwb25zaXZlQ29uZmlndXJhdGlvbixcclxuICAgICAgICAgICAgICAgIGRlcHM6W1JFU1BPTlNJVkVfQ09ORklHVVJBVElPTl1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgUmVzcG9uc2l2ZVN0YXRlLFxyXG4gICAgICAgICAgICBQbGF0Zm9ybVNlcnZpY2UsXHJcbiAgICAgICAgICAgIFJFU1BPTlNJVkVfU0laRV9JTkZPX1JYLFxyXG4gICAgICAgICAgICBVU0VSQUdFTlRfSU5GT19SWCxcclxuICAgICAgICAgICAgQlJPV1NFUl9JTkZPX1JYLFxyXG4gICAgICAgICAgICBJRV9JTkZPX1JYLFxyXG4gICAgICAgICAgICBERVZJQ0VTX0lORk9fUlhdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiJdfQ==