/**
 * @name browser-directives
 * @description Browser directives in ngx-responsive
 *
 * @license MIT
 */
import { TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
import * as ɵngcc0 from '@angular/core';
export declare class IsChromeDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isChrome(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsChromeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsChromeDirective, "[isChrome]", never, { "isChrome": "isChrome"; }, {}, never>;
}
export declare class IsFirefoxDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isFirefox(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsFirefoxDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsFirefoxDirective, "[isFirefox]", never, { "isFirefox": "isFirefox"; }, {}, never>;
}
export declare class IsSafariDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isSafari(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsSafariDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsSafariDirective, "[isSafari]", never, { "isSafari": "isSafari"; }, {}, never>;
}
export declare class IsOperaDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isOpera(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsOperaDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsOperaDirective, "[isOpera]", never, { "isOpera": "isOpera"; }, {}, never>;
}
export declare class IsIEDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIE(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIEDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIEDirective, "[isIE]", never, { "isIE": "isIE"; }, {}, never>;
}
export declare class ShowItBrowserDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set showItBrowser(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ShowItBrowserDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ShowItBrowserDirective, "[showItBrowser]", never, { "showItBrowser": "showItBrowser"; }, {}, never>;
}
export declare class HideItBrowserDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set hideItBrowser(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<HideItBrowserDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<HideItBrowserDirective, "[hideItBrowser]", never, { "hideItBrowser": "hideItBrowser"; }, {}, never>;
}
export declare class IsIE9Directive extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIE9(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIE9Directive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIE9Directive, "[isIE9]", never, { "isIE9": "isIE9"; }, {}, never>;
}
export declare class IsIE10Directive extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIE10(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIE10Directive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIE10Directive, "[isIE10]", never, { "isIE10": "isIE10"; }, {}, never>;
}
export declare class IsIE11Directive extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIE11(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIE11Directive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIE11Directive, "[isIE11]", never, { "isIE11": "isIE11"; }, {}, never>;
}
export declare class IsIE12Directive extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIE12(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIE12Directive, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIE12Directive, "[isIE12]", never, { "isIE12": "isIE12"; }, {}, never>;
}
export declare class ShowIEVersionDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set showIEVersion(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ShowIEVersionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ShowIEVersionDirective, "[showIEVersion]", never, { "showIEVersion": "showIEVersion"; }, {}, never>;
}
export declare class HideIEVersionDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set hideIEVersion(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<HideIEVersionDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<HideIEVersionDirective, "[hideIEVersion]", never, { "hideIEVersion": "hideIEVersion"; }, {}, never>;
}

//# sourceMappingURL=browsers-directives.d.ts.map