/**
 * @name devices.directives
 * @description Devices directives in ngx-responsive
 *
 * @license MIT
 */
import { TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
import * as ɵngcc0 from '@angular/core';
export declare class IsSmartTvDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isSmartTv(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsSmartTvDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsSmartTvDirective, "[isSmartTv]", never, { "isSmartTv": "isSmartTv"; }, {}, never>;
}
export declare class IsDesktopDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isDesktop(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsDesktopDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsDesktopDirective, "[isDesktop]", never, { "isDesktop": "isDesktop"; }, {}, never>;
}
export declare class IsTabletDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isTablet(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsTabletDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsTabletDirective, "[isTablet]", never, { "isTablet": "isTablet"; }, {}, never>;
}
export declare class IsMobileDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isMobile(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsMobileDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsMobileDirective, "[isMobile]", never, { "isMobile": "isMobile"; }, {}, never>;
}
export declare class ShowItDeviceDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set showItDevice(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ShowItDeviceDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ShowItDeviceDirective, "[showItDevice]", never, { "showItDevice": "showItDevice"; }, {}, never>;
}
export declare class HideItDeviceDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set hideItDevice(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<HideItDeviceDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<HideItDeviceDirective, "[hideItDevice]", never, { "hideItDevice": "hideItDevice"; }, {}, never>;
}
export declare class IsIphoneDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIphone(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIphoneDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIphoneDirective, "[isIphone]", never, { "isIphone": "isIphone"; }, {}, never>;
}
export declare class IsIpadDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isIphone(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsIpadDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsIpadDirective, "[isIpad]", never, { "isIphone": "isIphone"; }, {}, never>;
}
export declare class IsAndroidMobileDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isAndroidMobile(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsAndroidMobileDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsAndroidMobileDirective, "[isAndroidMobile]", never, { "isAndroidMobile": "isAndroidMobile"; }, {}, never>;
}
export declare class IsAndroidTabletDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isAndroidTablet(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsAndroidTabletDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsAndroidTabletDirective, "[isAndroidTablet]", never, { "isAndroidTablet": "isAndroidTablet"; }, {}, never>;
}
export declare class IsWindowsPhoneDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isWindowsPhone(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsWindowsPhoneDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsWindowsPhoneDirective, "[isWindowsPhone]", never, { "isWindowsPhone": "isWindowsPhone"; }, {}, never>;
}
export declare class ShowItStandardDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set showItStandard(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ShowItStandardDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ShowItStandardDirective, "[showItStandard]", never, { "showItStandard": "showItStandard"; }, {}, never>;
}
export declare class HideItStandardDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set hideItStandard(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<HideItStandardDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<HideItStandardDirective, "[hideItStandard]", never, { "hideItStandard": "hideItStandard"; }, {}, never>;
}
export declare class IsPortraitDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isPortrait(grid_state: string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsPortraitDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsPortraitDirective, "[isPortrait]", never, { "isPortrait": "isPortrait"; }, {}, never>;
}
export declare class IsLandscapeDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    set isLandscape(grid_state: string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<IsLandscapeDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<IsLandscapeDirective, "[isLandscape]", never, { "isLandscape": "isLandscape"; }, {}, never>;
}

//# sourceMappingURL=devices-directives.d.ts.map