/**
 *  @name bootstrap.directives
 *  @description bootstrap directives
 *  @license MIT
 */
import { TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';
import { ResponsiveState } from '../../@core/providers/responsive-state/responsive-state';
import { RESPONSIVE_BASE } from '../../@core/providers/responsive-base/responsive-base';
import { PlatformService } from '../../@core/providers/platform-service/platform.service';
import * as ɵngcc0 from '@angular/core';
export declare class XlDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<XlDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<XlDirective, "[xl]", never, {}, {}, never>;
}
export declare class LgDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<LgDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<LgDirective, "[lg]", never, {}, {}, never>;
}
export declare class MdDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<MdDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<MdDirective, "[md]", never, {}, {}, never>;
}
export declare class SmDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<SmDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<SmDirective, "[sm]", never, {}, {}, never>;
}
export declare class XsDirective extends RESPONSIVE_BASE<any> {
    protected _state: string;
    protected _showWhenTrue: boolean;
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<XsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<XsDirective, "[xs]", never, {}, {}, never>;
}
export declare class ShowItBootstrapDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set showItBootstrap(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<ShowItBootstrapDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<ShowItBootstrapDirective, "[showItBootstrap]", never, { "showItBootstrap": "showItBootstrap"; }, {}, never>;
}
export declare class HideItBootstrapDirective extends RESPONSIVE_BASE<any> {
    protected _showWhenTrue: boolean;
    set hideItBootstrap(grid_state: string[] | string);
    constructor(templateRef: TemplateRef<any>, viewContainer: ViewContainerRef, _responsiveState: ResponsiveState, cd: ChangeDetectorRef, platformService: PlatformService);
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<HideItBootstrapDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDeclaration<HideItBootstrapDirective, "[hideItBootstrap]", never, { "hideItBootstrap": "hideItBootstrap"; }, {}, never>;
}

//# sourceMappingURL=bootstrap-directives.d.ts.map